# 8.4 - Experimenting with Parameters Using TurtleSim

This tutorial demonstrates how to experiment with ROS2 parameters using the `turtlesim` package, focusing on configuring the background color of the `turtlesim_node` via parameters (`background_r`, `background_g`, `background_b`). You’ll learn to inspect parameters with `ros2 param list` and `ros2 param get`, set parameters at runtime using `ros2 run` with `--ros-args -p`, and explore parameter-related services using `ros2 service list`, `ros2 service type`, and `ros2 service call`. The tutorial highlights interacting with parameters of existing nodes without accessing their source code and introduces programmatic parameter interaction via services. It builds on [8.1 - What is a ROS2 Parameter?](Section%208%20-%20ROS2%20Parameters/8.1%20-%20What%20is%20a%20ROS2%20Parameter%3F.md), [8.2 - Using Parameters in a Python Node](Section%208%20-%20ROS2%20Parameters/8.2%20-%20Using%20Parameters%20in%20a%20Python%20Node.md), and [8.3 - Using Parameters in a C++ Node](Section%208%20-%20ROS2%20Parameters/8.3%20-%20Using%20Parameters%20in%20a%20C%2B%2B%20Node.md), is part of the [ROS2 for Beginners](https://www.udemy.com/course/ros2-for-beginners/) Udemy course, and targets **ROS2 Jazzy Jalisco** on **Ubuntu 24.04**.

## Prerequisites

- **ROS2 Installation**: ROS2 Jazzy installed in `/opt/ros/jazzy` (via `ros-jazzy-desktop`), including `turtlesim` and `rcl_interfaces`. Source the environment:
  ```bash
  source /opt/ros/jazzy/setup.bash
  ```
  See the [ROS2 Installation Guide](https://docs.ros.org/en/jazzy/Installation.html) if not installed.
- **TurtleSim Package**: Installed with `ros-jazzy-desktop` or install via:
  ```bash
  sudo apt install ros-jazzy-turtlesim
  ```
- **ROS2 Workspace**: A ROS2 workspace (`~/ros2_ws`) with `my_py_pkg` and `my_cpp_pkg`, set up in [3.1 - ROS2 Workspace Setup Tutorial](Section%203%20-%20Your%20First%20ROS2%20Program/3.1%20-%20ROS2%20Workspace%20Setup%20Tutorial.md), [3.2 - Creating a ROS2 Python Package](Section%203%20-%20Your%20First%20ROS2%20Program/3.2%20-%20Creating%20a%20ROS2%20Python%20Package.md), and [3.3 - Creating a ROS2 C++ Package](Section%203%20-%20Your%20First%20ROS2%20Program/3.3%20-%20Creating%20a%20ROS2%20C%2B%2B%20Package.md). Source the workspace:
  ```bash
  source ~/ros2_ws/install/setup.bash
  ```
  Ensure `~/.bashrc` sources the environment:
  ```bash
  echo "source /opt/ros/jazzy/setup.bash" >> ~/.bashrc
  echo "source ~/ros2_ws/install/setup.bash" >> ~/.bashrc
  ```
- **Parameter Knowledge**: Understanding of ROS2 parameters from [8.1](Section%208%20-%20ROS2%20Parameters/8.1%20-%20What%20is%20a%20ROS2%20Parameter%3F.md), [8.2](Section%208%20-%20ROS2%20Parameters/8.2%20-%20Using%20Parameters%20in%20a%20Python%20Node.md), and [8.3](Section%208%20-%20ROS2%20Parameters/8.3%20-%20Using%20Parameters%20in%20a%20C%2B%2B%20Node.md).
- **CLI Tools**: Familiarity with `ros2 run`, `ros2 param list`, `ros2 node list`, `ros2 service list`, and `ros2 service call` from [5.6 - Introspecting ROS2 Topics with Command Line Tools](Section%205%20-%20ROS2%20Communication/5.6%20-%20Introspecting%20ROS2%20Topics%20with%20Command%20Line%20Tools.md), [6.8 - Introspecting ROS2 Services with Command Line Tools](Section%206%20-%20ROS2%20Services/6.8%20-%20Introspecting%20ROS2%20Services%20with%20Command%20Line%20Tools.md), [8.2](Section%208%20-%20ROS2%20Parameters/8.2%20-%20Using%20Parameters%20in%20a%20Python%20Node.md), and [8.3](Section%208%20-%20ROS2%20Parameters/8.3%20-%20Using%20Parameters%20in%20a%20C%2B%2B%20Node.md).
- **Development Tools**:
  - A `bash`-compatible terminal (e.g., Terminator: `sudo apt install terminator`).
  - `turtlesim` and `rcl_interfaces` installed (included in `ros-jazzy-desktop` or install via `sudo apt install ros-jazzy-turtlesim ros-jazzy-rcl-interfaces`).

## Step-by-Step Instructions

### Step 1: Start TurtleSim and Inspect Nodes

Launch the `turtlesim_node` and verify its presence.

1. **Close All Terminals**:
   Ensure a clean environment:
   ```bash
   pkill terminator
   ```

2. **Launch TurtleSim**:
   Open a sourced terminal and run:
   ```bash
   terminator
   source ~/ros2_ws/install/setup.bash
   ros2 run turtlesim turtlesim_node
   ```
   - Opens the TurtleSim window with a turtle in the center and a default background color (light blue).

3. **List Nodes**:
   In another sourced terminal:
   ```bash
   terminator
   source ~/ros2_ws/install/setup.bash
   ros2 node list
   ```
   Expected output:
   ```
   /turtlesim
   ```
   - Confirms the `turtlesim_node` is running as `/turtlesim`.

**Screenshot**: TurtleSim window and `ros2 node list` output:

![TurtleSim Start](images/turtlesim_start_node_list.png "TurtleSim window and ros2 node list output")

### Step 2: List Parameters with `ros2 param list`

Inspect the parameters available for the `/turtlesim` node.

1. **List Parameters**:
   In a sourced terminal:
   ```bash
   ros2 param list
   ```
   Expected output:
   ```
   /turtlesim:
     background_b
     background_g
     background_r
     use_sim_time
   ```
   - **Parameters**:
     - `background_r`: Red component of the background color (integer, 0–255).
     - `background_g`: Green component (integer, 0–255).
     - `background_b`: Blue component (integer, 0–255).
     - `use_sim_time`: Default parameter for simulation time (boolean, typically `false`).
   - **Note**: Other parameters (e.g., `qos_overrides`) may appear depending on the ROS2 version but are not relevant here.

**Screenshot**: Terminal output of `ros2 param list`:

![Param List](images/ros2_param_list_turtlesim.png "ros2 param list for /turtlesim")

### Step 3: Get Parameter Values with `ros2 param get`

Retrieve the default values of the background color parameters.

1. **Get `background_r`**:
   ```bash
   ros2 param get /turtlesim background_r
   ```
   Expected output:
   ```
   Integer value is: 69
   ```

2. **Get `background_g`**:
   ```bash
   ros2 param get /turtlesim background_g
   ```
   Expected output:
   ```
   Integer value is: 86
   ```

3. **Get `background_b`**:
   ```bash
   ros2 param get /turtlesim background_b
   ```
   Expected output:
   ```
   Integer value is: 255
   ```
   - **Observation**: The default RGB values (69, 86, 255) produce a light blue background.
   - **Note**: Use the full node name (`/turtlesim`) and exact parameter name. Autocompletion (press `Tab`) helps.

**Screenshot**: Terminal output of `ros2 param get` for background colors:

![Param Get](images/ros2_param_get_turtlesim.png "ros2 param get for background_r, background_g, background_b")

### Step 4: Set Parameters at Runtime with `ros2 run`

Modify the background color by setting parameters when launching the node.

1. **Stop TurtleSim**:
   Press `Ctrl+C` in the `turtlesim_node` terminal.

2. **Run with One Parameter**:
   ```bash
   ros2 run turtlesim turtlesim_node --ros-args -p background_b:=0
   ```
   - Sets `background_b` to `0` (removes blue component).
   - Other parameters (`background_r`, `background_g`) use default values (69, 86).
   - **Result**: Background changes to a reddish-green hue (lacking blue).

3. **Verify Parameters**:
   In another terminal:
   ```bash
   ros2 param get /turtlesim background_b
   ```
   Expected output:
   ```
   Integer value is: 0
   ```
   ```bash
   ros2 param get /turtlesim background_r
   ```
   Expected output:
   ```
   Integer value is: 69
   ```
   ```bash
   ros2 param get /turtlesim background_g
   ```
   Expected output:
   ```
   Integer value is: 86
   ```

**Screenshot**: TurtleSim with `background_b=0` and `ros2 param get` output:

![TurtleSim Blue Zero](images/turtlesim_background_b_zero.png "TurtleSim with background_b=0 and param get output")

4. **Stop and Run with Multiple Parameters**:
   Press `Ctrl+C` to stop the node.
   Run with two parameters:
   ```bash
   ros2 run turtlesim turtlesim_node --ros-args -p background_b:=0 -p background_r:=200
   ```
   - Sets `background_b=0`, `background_r=200`.
   - `background_g` remains at default (86).
   - **Result**: Background shifts to a greenish hue with a stronger red component.

5. **Verify Parameters**:
   ```bash
   ros2 param get /turtlesim background_r
   ```
   Expected output:
   ```
   Integer value is: 200
   ```
   ```bash
   ros2 param get /turtlesim background_b
   ```
   Expected output:
   ```
   Integer value is: 0
   ```
   ```bash
   ros2 param get /turtlesim background_g
   ```
   Expected output:
   ```
   Integer value is: 86
   ```

**Screenshot**: TurtleSim with `background_b=0`, `background_r=200`, and `ros2 param get` output:

![TurtleSim Red Blue](images/turtlesim_background_r_b.png "TurtleSim with background_b=0, background_r=200")

### Step 5: Explore Parameter-Related Services

Investigate services that allow programmatic interaction with parameters.

1. **List Services**:
   ```bash
   ros2 service list
   ```
   Expected output (partial):
   ```
   /turtlesim/describe_parameters
   /turtlesim/get_parameter_types
   /turtlesim/get_parameters
   /turtlesim/list_parameters
   /turtlesim/set_parameters
   /turtlesim/set_parameters_atomically
   /turtlesim/clear
   /turtlesim/kill
   /turtlesim/reset
   /turtlesim/spawn
   /turtlesim/teleport_absolute
   /turtlesim/teleport_relative
   ```
   - Services like `/turtlesim/list_parameters`, `/turtlesim/get_parameters`, and `/turtlesim/set_parameters` are parameter-related, provided by the `rcl_interfaces` package.

2. **Check Service Type**:
   For the `/turtlesim/list_parameters` service:
   ```bash
   ros2 service type /turtlesim/list_parameters
   ```
   Expected output:
   ```
   rcl_interfaces/srv/ListParameters
   ```

3. **Inspect Service Interface**:
   ```bash
   ros2 interface show rcl_interfaces/srv/ListParameters
   ```
   Expected output:
   ```
   string[] prefixes
   uint64 depth
   ---
   string[] names
   ```
   - **Request**: `prefixes` (list of parameter name prefixes, can be empty) and `depth` (recursion depth, typically 0 for all parameters).
   - **Response**: `names` (list of parameter names).
   - **Note**: An empty request (`{}`) lists all parameters.

4. **Call the Service**:
   ```bash
   ros2 service call /turtlesim/list_parameters rcl_interfaces/srv/ListParameters "{}"
   ```
   Expected output:
   ```
   response:
     names: ['background_b', 'background_g', 'background_r', 'use_sim_time']
   ```
   - Equivalent to `ros2 param list` for `/turtlesim`.
   - **Note**: Use `{}` for an empty request to list all parameters.

**Screenshot**: Terminal output of `ros2 service list`, `ros2 service type`, and `ros2 service call`:

![Service Exploration](images/ros2_service_list_parameters.png "ros2 service list, type, and call for /turtlesim/list_parameters")

### Step 6: Understand Programmatic Parameter Interaction

Parameter-related services (e.g., `/turtlesim/list_parameters`, `/turtlesim/get_parameters`, `/turtlesim/set_parameters`) allow nodes to interact with another node’s parameters programmatically.

- **Use Case**: A custom node could call `/turtlesim/get_parameters` to retrieve `background_r` and adjust its behavior (e.g., change turtle color to match).
- **Implementation**: Create a service client in Python (`rclpy`) or C++ (`rclcpp`) using `rcl_interfaces/srv/*` interfaces, as shown in [6.3 - Writing a Python Service Server and Client](Section%206%20-%20ROS2%20Services/6.3%20-%20Writing%20a%20Python%20Service%20Server%20and%20Client.md).
- **Practicality**: Rarely needed for beginners, as `ros2 param` commands are simpler for terminal-based interaction. Useful for advanced applications requiring dynamic parameter management.

**Screenshot**: Diagram of programmatic parameter interaction:

![Programmatic Parameters](images/programmatic_parameters_diagram.png "Diagram of node interacting with turtlesim parameters via services")

### Step 7: Experiment with Different Parameter Values

Practice setting various RGB combinations to observe color changes.

1. **Stop TurtleSim**:
   Press `Ctrl+C`.

2. **Try Different Combinations**:
   - Red-dominated:
     ```bash
     ros2 run turtlesim turtlesim_node --ros-args -p background_r:=255 -p background_g:=0 -p background_b:=0
     ```
   - Green-dominated:
     ```bash
     ros2 run turtlesim turtlesim_node --ros-args -p background_r:=0 -p background_g:=255 -p background_b:=0
     ```
   - Custom mix (e.g., purple):
     ```bash
     ros2 run turtlesim turtlesim_node --ros-args -p background_r:=128 -p background_g:=0 -p background_b:=128
     ```
   - **Note**: Values must be integers between 0 and 255.

3. **Verify Each Run**:
   Use `ros2 param get /turtlesim background_r` (and `g`, `b`) to confirm values.
   Observe the background color in the TurtleSim window.

**Screenshot**: TurtleSim with a purple background (`background_r=128`, `background_g=0`, `background_b=128`):

![TurtleSim Purple](images/turtlesim_purple_background.png "TurtleSim with purple background")

### Troubleshooting

- **TurtleSim Doesn’t Start**:
  - Ensure `turtlesim` is installed: `apt list --installed | grep ros-jazzy-turtlesim`.
  - Check terminal sourcing: `echo $ROS_DISTRO` should show `jazzy`.
  - Run `ros2 pkg list | grep turtlesim` to confirm package availability.
- **Parameters Not Listed**:
  - Ensure node is running: `ros2 node list` should show `/turtlesim`.
  - Run `ros2 param list` while the node is active.
  - Source workspace: `source ~/ros2_ws/install/setup.bash`.
- **Invalid Parameter Values**:
  - Ensure values are integers (0–255) for `background_r`, `g`, `b`.
  - Check syntax: Use `-p <name>:=<value>` (e.g., `-p background_b:=0`, not `:=0.0`).
  - Example error:
    ```bash
    ros2 run turtlesim turtlesim_node --ros-args -p background_b:=256
    ```
    Produces:
    ```
    [ERROR] [rclcpp]: Parameter 'background_b' value 256 is out of range for type integer
    ```
- **Service Call Fails**:
  - Verify service exists: `ros2 service list | grep list_parameters`.
  - Use correct interface: `rcl_interfaces/srv/ListParameters`.
  - Ensure empty request syntax: `"{}"`.
  - Check node is running: `ros2 node list`.
- **Background Color Doesn’t Change**:
  - Confirm parameter values with `ros2 param get`.
  - Restart node with correct `ros2 run` command.
  - Ensure values are within 0–255 range.

### Notes

- **Fact-Checking**:
  - **TurtleSim Parameters**: `background_r`, `background_g`, `background_b` are integers (0–255), per [TurtleSim Documentation](https://docs.ros.org/en/jazzy/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim.html).
  - **Parameter Commands**: `ros2 param list` and `ros2 param get` list and retrieve parameters, per [ROS2 Parameter CLI](https://docs.ros.org/en/jazzy/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters.html).
  - **Runtime Setting**: `--ros-args -p <name>:=<value>` sets parameters, per [ROS2 Parameter CLI](https://docs.ros.org/en/jazzy/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters.html).
  - **Parameter Services**: `rcl_interfaces/srv/ListParameters`, `GetParameters`, `SetParameters` enable programmatic interaction, per [ROS2 rcl_interfaces](https://docs.ros.org/en/jazzy/_static/api/rcl_interfaces/index.html).
  - **Service Calls**: `ros2 service call` with empty request lists parameters, per [ROS2 Service CLI](https://docs.ros.org/en/jazzy/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services.html).
  - **Default Parameters**: `use_sim_time` is added to all nodes, per [ROS2 Parameter Behavior](https://docs.ros.org/en/jazzy/Concepts/About-ROS-2-Parameters.html).

- **Transcript Clarifications**:
  - Specified `turtlesim_node` and corrected “shows Cuz of the rights” to irrelevant default parameters.
  - Clarified `ros2 param get` syntax: `<node_name> <parameter_name>` (e.g., `/turtlesim background_r`).
  - Corrected “RCL interfaces” to `rcl_interfaces`.
  - Emphasized integer range (0–255) for RGB parameters.
  - Explained rarity of service-based parameter interaction for beginners.
  - Removed `turtle_teleop_key` launch, as not needed for parameter focus.

- **Repository Structure**:
  - Places tutorial in `Section 8 - ROS2 Parameters/`, alongside 8.1–8.3.
  - Uses `images/` for six screenshots: `turtlesim_start_node_list.png`, `ros2_param_list_turtlesim.png`, `ros2_param_get_turtlesim.png`, `turtlesim_background_b_zero.png`, `turtlesim_background_r_b.png`, `ros2_service_list_parameters.png`, `programmatic_parameters_diagram.png`, `turtlesim_purple_background.png`.
  - Assumes prior sections (3–7) and 8.1–8.3 exist.

- **Images**:
  - Create screenshots for `images/`:
    - `turtlesim_start_node_list.png`: TurtleSim window and `ros2 node list` output.
    - `ros2_param_list_turtlesim.png`: Terminal output of `ros2 param list`.
    - `ros2_param_get_turtlesim.png`: Terminal output of `ros2 param get` for `background_r`, `g`, `b`.
    - `turtlesim_background_b_zero.png`: TurtleSim with `background_b=0` and `ros2 param get` output.
    - `turtlesim_background_r_b.png`: TurtleSim with `background_b=0`, `background_r=200`, and `ros2 param get` output.
    - `ros2_service_list_parameters.png`: Terminal output of `ros2 service list`, `ros2 service type`, and `ros2 service call`.
    - `programmatic_parameters_diagram.png`: Diagram (use draw.io) showing a node calling `/turtlesim/list_parameters`.
    - `turtlesim_purple_background.png`: TurtleSim with `background_r=128`, `background_g=0`, `background_b=128`.
  - Use GNOME Screenshot (`sudo apt install gnome-screenshot`) or Shutter (`sudo apt install shutter`) for terminal and TurtleSim shots.

- **Best Practices**:
  - Use `ros2 param list` to discover parameters before modifying.
  - Verify parameter types and ranges with `ros2 param get` before setting.
  - Use autocompletion for node and parameter names to avoid typos.
  - Test parameter changes incrementally (e.g., one at a time) to observe effects.
  - Keep service-based interaction as an advanced option, focusing on `ros2 param` commands for simplicity.

## Next Steps

You’ve experimented with TurtleSim parameters and explored parameter-related services. Next, you’ll:
- Dynamically update parameters with `ros2 param set` (e.g., `8.5 - Managing Parameters at Runtime`).
- Configure parameters using YAML files (e.g., `8.6 - Configuring Parameters with YAML Files`).
- Integrate parameters into a custom project, such as enhancing `turtlesim` or a final course project (hinted in 6.10).

For more details, refer to the [ROS2 Documentation](https://docs.ros.org/en/jazzy/index.html) or the [ROS2 for Beginners](https://www.udemy.com/course/ros2-for-beginners/) course.