# 7.1 - What is a ROS2 Interface

This tutorial introduces **ROS2 interfaces**, the data structures used for communication in topics and services. It builds on the concepts of nodes (Section 3), tools (Section 4), topics (Section 5), and services (Section 6), particularly referencing interfaces like `example_interfaces/msg/Int64`, `std_srvs/srv/SetBool`, `sensor_msgs/msg/JointState`, and `geometry_msgs/msg/Twist`. You’ll learn what message and service definitions are, how they define the content of topics and services, how they are generated into source code, the primitive data types available, and how to explore existing interfaces in packages like `example_interfaces`, `std_srvs`, `sensor_msgs`, and `geometry_msgs`. This tutorial is part of the [ROS2 for Beginners](https://www.udemy.com/course/ros2-for-beginners/) Udemy course and targets **ROS2 Jazzy Jalisco** on **Ubuntu 24.04**.

## Prerequisites

- **ROS2 Installation**: ROS2 Jazzy installed in `/opt/ros/jazzy` (via `ros-jazzy-desktop`), including `example_interfaces`, `std_srvs`, `sensor_msgs`, `geometry_msgs`, and `turtlesim`. Source the environment:
  ```bash
  source /opt/ros/jazzy/setup.bash
  ```
  See the [ROS2 Installation Guide](https://docs.ros.org/en/jazzy/Installation.html) if not installed.
- **ROS2 Workspace**: A ROS2 workspace (`~/ros2_ws`) with `my_py_pkg` and `my_cpp_pkg`, set up in [3.1 - ROS2 Workspace Setup Tutorial](Section%203%20-%20Your%20First%20ROS2%20Program/3.1%20-%20ROS2%20Workspace%20Setup%20Tutorial.md), [3.2 - Creating a ROS2 Python Package](Section%203%20-%20Your%20First%20ROS2%20Program/3.2%20-%20Creating%20a%20ROS2%20Python%20Package.md), and [3.3 - Creating a ROS2 C++ Package](Section%203%20-%20Your%20First%20ROS2%20Program/3.3%20-%20Creating%20a%20ROS2%20C%2B%2B%20Package.md). Source the workspace:
  ```bash
  source ~/ros2_ws/install/setup.bash
  ```
- **Topic Knowledge**: Understanding of ROS2 topics, publishers, and subscribers from [5.1 - What is a ROS2 Topic](Section%205%20-%20ROS2%20Communication/5.1%20-%20What%20is%20a%20ROS2%20Topic.md) through [5.9 - Experimenting with ROS2 Topics Using Turtlesim](Section%205%20-%20ROS2%20Communication/5.9%20-%20Experimenting%20with%20ROS2%20Topics%20Using%20Turtlesim.md).
- **Service Knowledge**: Familiarity with ROS2 services, servers, and clients from [6.1 - What is a ROS2 Service](Section%206%20-%20ROS2%20Services/6.1%20-%20What%20is%20a%20ROS2%20Service.md) through [6.10 - Experimenting with ROS2 Services Using Turtlesim](Section%206%20-%20ROS2%20Services/6.10%20-%20Experimenting%20with%20ROS2%20Services%20Using%20Turtlesim.md).
- **CLI Tools**: Familiarity with `ros2 interface` from [6.8 - Introspecting ROS2 Services with Command Line Tools](Section%206%20-%20ROS2%20Services/6.8%20-%20Introspecting%20ROS2%20Services%20with%20Command%20Line%20Tools.md) and `ros2 topic` from [5.6 - Introspecting ROS2 Topics with Command Line Tools](Section%205%20-%20ROS2%20Communication/5.6%20-%20Introspecting%20ROS2%20Topics%20with%20Command%20Line%20Tools.md).
- **Development Tools**:
  - A `bash`-compatible terminal (e.g., Terminator: `sudo apt install terminator`).
  - A web browser to access GitHub and ROS2 documentation.
  - `example_interfaces`, `std_srvs`, `sensor_msgs`, `geometry_msgs` installed (included in `ros-jazzy-desktop` or install via `sudo apt install ros-jazzy-example-interfaces ros-jazzy-std-srvs ros-jazzy-sensor-msgs ros-jazzy-geometry-msgs`).

## Step-by-Step Instructions

### Step 1: Understand ROS2 Interfaces

Interfaces define the data structure for ROS2 communication, enabling nodes to exchange structured data via topics or services.

1. **Message Definitions (for Topics)**:
   - A **topic** is defined by:
     - **Name**: E.g., `/robot_news` (from 5.2–5.5) or `/turtle1/cmd_vel` (from 5.9).
     - **Interface**: A message definition specifying the data structure (e.g., `example_interfaces/msg/Int64` for an integer).
   - Example: The `Int64` message (`example_interfaces/msg/Int64`) contains a single field:
     ```
     int64 data
     ```
     Used in topic tutorials (e.g., 5.2–5.5) for publishing/subscribing integers.
   - Analogy: A topic is like a transport company delivering a letter; the message definition is the letter’s content.

2. **Service Definitions (for Services)**:
   - A **service** is defined by:
     - **Name**: E.g., `/add_two_ints` (from 6.2–6.9) or `/spawn` (from 6.10).
     - **Interface**: A service definition containing two message definitions:
       - **Request**: Data sent by the client (e.g., `a`, `b` for `/add_two_ints`).
       - **Response**: Data returned by the server (e.g., `sum` for `/add_two_ints`).
   - Example: The `AddTwoInts` service (`example_interfaces/srv/AddTwoInts`):
     ```
     int64 a
     int64 b
     ---
     int64 sum
     ```
     Used in service tutorials (6.2–6.9) for adding two integers.
   - Analogy: A service is like sending a letter (request) and receiving a reply (response); the service definition combines both message definitions.

3. **Role of Interfaces**:
   - **Topics**: All nodes publishing/subscribing to a topic must use the same message definition (e.g., `geometry_msgs/msg/Twist` for `/turtle1/cmd_vel`).
   - **Services**: The client sends a request matching the service’s request definition, and the server responds with a matching response definition (e.g., `turtlesim/srv/Spawn` for `/spawn`).
   - Interfaces ensure standardized communication, enabling interoperability across nodes and languages (Python, C++).

**Screenshot**: Diagram of topic and service interfaces (conceptual):

![ROS2 Interface Diagram](images/ros2_interface_diagram.png "Diagram of topic and service interfaces")

### Step 2: Explore How Interfaces Are Generated

Interfaces are written as text files (`.msg` for messages, `.srv` for services) and converted into source code during the build process.

1. **Message Definition Process**:
   - A `.msg` file (e.g., `Int64.msg`) defines fields using primitive types or other messages.
   - Example: `example_interfaces/msg/Int64`:
     ```
     int64 data
     ```
   - During `colcon build`, the ROS2 build system (via `rosidl`) generates source code:
     - **C++**: Header files (e.g., `example_interfaces/msg/int64.hpp`) for use with `rclcpp`.
     - **Python**: Modules (e.g., `example_interfaces.msg.Int64`) for use with `rclpy`.
   - This allows direct inclusion in code (e.g., `from example_interfaces.msg import Int64` in Python).

2. **Service Definition Process**:
   - A `.srv` file (e.g., `AddTwoInts.srv`) defines request and response fields, separated by `---`.
   - Example: `example_interfaces/srv/AddTwoInts`:
     ```
     int64 a
     int64 b
     ---
     int64 sum
     ```
   - `colcon build` generates:
     - **C++**: Header files (e.g., `example_interfaces/srv/add_two_ints.hpp`).
     - **Python**: Modules (e.g., `example_interfaces.srv.AddTwoInts`).
   - Enables service calls in code (e.g., `from example_interfaces.srv import AddTwoInts`).

3. **Why It Works**:
   - The build system ensures interfaces are language-agnostic, supporting Python, C++, and other ROS2 languages.
   - Generated code handles serialization/deserialization, making interfaces seamless in node communication.

**Screenshot**: Build process for interfaces:

![Interface Build Process](images/ros2_interface_build_process.png "ROS2 interface build process")

### Step 3: Learn Primitive Data Types

ROS2 interfaces use a set of primitive data types, which map to Python and C++ equivalents.

1. **Access the ROS2 Interface Documentation**:
   - Open a browser and search for “ROS2 interfaces” or visit [ROS2 Interface Design](https://design.ros2.org/articles/interface_definition.html).
   - The page lists primitive types supported in `.msg` and `.srv` files.

2. **Common Primitive Types**:
   - **Boolean**: `bool` (Python: `bool`, C++: `bool`).
     - Example: `bool enabled` for a flag.
   - **Integers**:
     - `int8`, `int16`, `int32`, `int64` (Python: `int`, C++: `int8_t`, `int16_t`, `int32_t`, `int64_t`).
     - Example: `int64 data` (used in `Int64.msg`).
   - **Floats**:
     - `float32`, `float64` (Python: `float`, C++: `float`, `double`).
     - Example: `float32 x` for coordinates.
   - **String**: `string` (Python: `str`, C++: `std::string`).
     - Example: `string name` for turtle names.
   - **Arrays**: Fixed or variable length (e.g., `float32[] values`, `float32[5] fixed_values`).
     - Example: `string[] name` for multiple joint names.

3. **Usage in Code**:
   - **Python**: Primitive types map directly (e.g., `msg.data = 42` for `int64 data`).
   - **C++**: Use standard types (e.g., `msg.data = 42` for `int64 data` with `int64_t`).
   - Arrays are lists in Python (`msg.values = [1.0, 2.0]`) and `std::vector` in C++ (`msg.values = {1.0, 2.0}`).

**Screenshot**: ROS2 interface documentation page:

![ROS2 Interface Docs](images/ros2_interface_docs.png "ROS2 interface documentation page")

### Step 4: Explore Existing Interface Packages

ROS2 provides many pre-built interfaces in packages like `example_interfaces`, `std_srvs`, `sensor_msgs`, and `geometry_msgs`.

1. **Example Interfaces**:
   - **Repository**: Search “ROS2 example interfaces GitHub” or visit [example_interfaces](https://github.com/ros2/example_interfaces).
   - **Structure**:
     - `msg/` for message definitions (e.g., `Int64.msg`).
     - `srv/` for service definitions (e.g., `AddTwoInts.srv`).
   - **Example**: `Int64.msg`:
     ```
     int64 data
     ```
     Used in topic tutorials (5.2–5.5).
   - **Access**:
     ```bash
     ros2 interface show example_interfaces/msg/Int64
     ```
     Output:
     ```
     int64 data
     ```

2. **Common Interfaces**:
   - **Repository**: Search “ROS2 common interfaces GitHub” or visit [common_interfaces](https://github.com/ros2/common_interfaces).
   - **Structure**: A collection of packages (e.g., `sensor_msgs`, `geometry_msgs`, `std_srvs`).
   - **Installation**:
     - Most are included in `ros-jazzy-desktop` (e.g., `geometry_msgs`).
     - Install others if needed:
       ```bash
       sudo apt install ros-jazzy-shape-msgs
       ```
       Replace underscores with dashes (e.g., `shape_msgs` becomes `shape-msgs`).

3. **Sensor Messages**:
   - **Path**: `common_interfaces/sensor_msgs/msg/`.
   - **Example**: `JointState.msg`:
     ```
     std_msgs/msg/Header header
     string[] name
     float64[] position
     float64[] velocity
     float64[] effort
     ```
     - **Use Case**: Publishes joint states for a robotic arm (e.g., position, velocity, effort for each joint).
     - **Dependencies**: Includes `std_msgs/msg/Header` for timestamps.
   - **Other Messages**: `Imu`, `Image`, `LaserScan`, `PointCloud2` for sensors.
   - **Access**:
     ```bash
     ros2 interface show sensor_msgs/msg/JointState
     ```

4. **Geometry Messages**:
   - **Path**: `common_interfaces/geometry_msgs/msg/`.
   - **Example**: `Twist.msg`:
     ```
     Vector3 linear
     Vector3 angular
     ```
     - **Vector3.msg** (same package):
       ```
       float64 x
       float64 y
       float64 z
       ```
     - **Use Case**: Represents velocity commands (linear and angular) for mobile robots (e.g., `turtlesim`’s `/turtle1/cmd_vel` in 5.9, TurtleBot).
   - **Access**:
     ```bash
     ros2 interface show geometry_msgs/msg/Twist
     ```

5. **Standard Services**:
   - **Path**: `common_interfaces/std_srvs/srv/`.
   - **Example**: `SetBool.srv`:
     ```
     bool data
     ---
     bool success
     string message
     ```
     - **Use Case**: Triggers actions with a boolean request (e.g., enable/disable a feature).
     - Matches output from `ros2 interface show std_srvs/srv/SetBool` (seen in 6.8 or 6.10).
   - **Access**:
     ```bash
     ros2 interface show std_srvs/srv/SetBool
     ```

**Screenshot**: GitHub page for `common_interfaces`:

![Common Interfaces GitHub](images/common_interfaces_github.png "GitHub page for common_interfaces")

### Step 5: Understand Interface Composition

Interfaces can include other messages but not services, enabling complex data structures.

1. **Message Inclusion**:
   - Messages can include other messages from the same or different packages.
   - Example: `sensor_msgs/msg/JointState` includes `std_msgs/msg/Header`:
     ```
     std_msgs/msg/Header header
     ```
   - Syntax: `<package_name>/msg/<MessageName>` (e.g., `std_msgs/msg/Header`).
   - Same-package messages omit the package name (e.g., `Vector3` in `Twist.msg`).

2. **Service Constraints**:
   - Services consist of two messages (request, response) separated by `---`.
   - Services can include messages in their request or response (e.g., `Vector3` in a custom service).
   - Services cannot include other services (e.g., you cannot nest `SetBool.srv` inside another `.srv`).
   - Example: A custom service could use `geometry_msgs/msg/Vector3`:
     ```
     geometry_msgs/msg/Vector3 position
     ---
     bool success
     ```

3. **Practical Example**:
   - In `turtlesim` (6.10), `/spawn` uses `turtlesim/srv/Spawn`:
     ```
     float32 x
     float32 y
     float32 theta
     string name
     ---
     string name
     ```
     - Request includes primitive types; response reuses the `name` field.
   - No service nesting, but messages like `geometry_msgs/msg/Pose` could be included if needed.

**Screenshot**: Example of `JointState.msg` in a text editor:

![JointState Message](images/joint_state_msg.png "JointState.msg in editor")

### Step 6: Prepare for Creating Custom Interfaces

This tutorial sets the stage for creating your own interfaces in future lessons.

1. **Key Points**:
   - Use primitive types (e.g., `bool`, `int64`, `float32`, `string`) and arrays.
   - Include existing messages (e.g., `std_msgs/msg/Header`, `geometry_msgs/msg/Vector3`).
   - Write `.msg` files for topics or `.srv` files for services in a package’s `msg/` or `srv/` directory.
   - Build with `colcon build` to generate code.

2. **Next Steps**:
   - Create a custom message (e.g., `7.2 - Creating a Custom ROS2 Message`).
   - Create a custom service (e.g., `7.3 - Creating a Custom ROS2 Service`).
   - Use custom interfaces in nodes within `my_py_pkg` or `my_cpp_pkg`.

3. **Practice**:
   - Browse `example_interfaces` and `common_interfaces` on GitHub.
   - Run `ros2 interface show` on various messages/services:
     ```bash
     ros2 interface show sensor_msgs/msg/Imu
     ros2 interface show geometry_msgs/msg/Pose
     ros2 interface show std_srvs/srv/Empty
     ```

### Troubleshooting

- **Interface Not Found**:
  - Ensure packages are installed:
    ```bash
    sudo apt install ros-jazzy-example-interfaces ros-jazzy-sensor-msgs ros-jazzy-geometry-msgs ros-jazzy-std-srvs
    ```
  - Source ROS2: `source /opt/ros/jazzy/setup.bash`.
  - Check with `ros2 interface list | grep <name>` (e.g., `grep Twist`).
- **Build Errors**:
  - Verify `package.xml` includes dependencies (e.g., `<depend>sensor_msgs</depend>`).
  - Run `colcon build` in the workspace root (`~/ros2_ws`).
- **GitHub Access**:
  - If URLs change, search “ROS2 example interfaces GitHub” or “ROS2 common interfaces GitHub”.
  - Use `ros2 interface show` to view definitions locally.
- **Type Mismatches**:
  - Ensure Python/C++ code uses correct types (e.g., `std::string` for `string`, `double` for `float64`).
  - Check documentation for mappings: [ROS2 Interface Design](https://design.ros2.org/articles/interface_definition.html).

### Notes

- **Fact-Checking**:
  - **Interfaces**: Messages (`.msg`) for topics, services (`.srv`) for request-response, per [ROS2 Interface Design](https://design.ros2.org/articles/interface_definition.html).
  - **Primitive Types**: `bool`, `int8`–`int64`, `float32`–`float64`, `string`, arrays, per [ROS2 Interface Definition](https://docs.ros.org/en/jazzy/Concepts/About-Interfaces.html).
  - **Code Generation**: `rosidl` generates Python/C++ code during `colcon build`, per [ROS2 Build System](https://docs.ros.org/en/jazzy/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.html).
  - **Example Interfaces**: Contains `Int64.msg`, `AddTwoInts.srv`, per [example_interfaces](https://github.com/ros2/example_interfaces).
  - **Common Interfaces**: Includes `sensor_msgs`, `geometry_msgs`, `std_srvs`, per [common_interfaces](https://github.com/ros2/common_interfaces).
  - **Sensor_msgs/JointState**: Uses `std_msgs/Header`, arrays for joint data, per [sensor_msgs/JointState](http://docs.ros.org/en/jazzy/api/sensor_msgs/msg/JointState.html).
  - **Geometry_msgs/Twist**: Uses `Vector3` for linear/angular velocity, per [geometry_msgs/Twist](http://docs.ros.org/en/jazzy/api/geometry_msgs/msg/Twist.html).
  - **Std_srvs/SetBool**: Boolean request, response with success/message, per [std_srvs/SetBool](http://docs.ros.org/en/jazzy/api/std_srvs/srv/SetBool.html).
  - **Service Constraints**: Services include messages, not other services, per [ROS2 Interface Definition](https://docs.ros.org/en/jazzy/Concepts/About-Interfaces.html).
  - **Installation**: Packages installed with `ros-jazzy-<package>`, underscores to dashes, per [ROS2 Package Installation](https://docs.ros.org/en/jazzy/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.html).

- **Transcript Clarifications**:
  - Corrected “Ros” to “ROS2”.
  - Specified GitHub repositories (`example_interfaces`, `common_interfaces`) without hardcoded URLs, as they may change.
  - Clarified that services cannot include other services, only messages.
  - Emphasized primitive types and their Python/C++ mappings.
  - Noted `geometry_msgs/Twist` usage in `turtlesim` (5.9) and mobile robots.
  - Simplified analogy of letters for topics (message) and services (request-response pair).

- **Repository Structure**:
  - Places tutorial in new `Section 7 - ROS2 Interfaces/`, as interfaces are a distinct topic.
  - Uses `images/` for five screenshots: `ros2_interface_diagram.png`, `ros2_interface_build_process.png`, `ros2_interface_docs.png`, `common_interfaces_github.png`, `joint_state_msg.png`.
  - Assumes prior sections (3–6) exist in `Section 3.../`, `Section 4.../`, etc.

- **Images**:
  - Create screenshots for `images/`:
    - `ros2_interface_diagram.png`: Diagram of topic (name + message) and service (name + request/response) interfaces (create manually or use a tool like Draw.io).
    - `ros2_interface_build_process.png`: Flowchart of `.msg`/`.srv` to Python/C++ code via `colcon build`.
    - `ros2_interface_docs.png`: Screenshot of [ROS2 Interface Design](https://design.ros2.org/articles/interface_definition.html).
    - `common_interfaces_github.png`: GitHub page for [common_interfaces](https://github.com/ros2/common_interfaces).
    - `joint_state_msg.png`: `JointState.msg` in a text editor or browser.
  - Use GNOME Screenshot, Shutter, or Draw.io.

- **Best Practices**:
  - Use `ros2 interface show` to inspect interfaces locally instead of relying on GitHub.
  - Install required packages explicitly (e.g., `ros-jazzy-sensor-msgs`) to avoid missing dependencies.
  - Use primitive types for simplicity; leverage existing messages (e.g., `geometry_msgs/Vector3`) for complex data.
  - Verify interface compatibility in Python/C++ code to avoid type errors.
  - Explore `common_interfaces` for reusable messages/services to avoid reinventing standard definitions.

## Next Steps

You’ve learned what ROS2 interfaces are, how message and service definitions work, and how to explore existing interfaces. Next, you’ll:
- Create a custom message definition (e.g., `7.2 - Creating a Custom ROS2 Message`) in `my_py_pkg` or a new package.
- Create a custom service definition (e.g., `7.3 - Creating a Custom ROS2 Service`) for a specific use case.
- Use custom interfaces in nodes to publish/subscribe topics or implement services.
- Apply interfaces to `turtlesim` (e.g., extend 5.9, 6.10 with custom messages).
- Explore advanced interfaces in `sensor_msgs` (e.g., `Image`, `PointCloud2`) for sensor applications.
- Integrate interfaces into the final course project (hinted in 6.10), combining topics and services.

For more details, refer to the [ROS2 Documentation](https://docs.ros.org/en/jazzy/index.html) or the [ROS2 for Beginners](https://www.udemy.com/course/ros2-for-beginners/) course.