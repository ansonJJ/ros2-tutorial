# 4.1 - Introspecting Nodes with ROS2 CLI

This tutorial explores the ROS2 Command Line Interface (CLI) to run and introspect ROS2 nodes, building on the nodes created in [3.5 - Creating a ROS2 Python Node](3.5%20-%20Creating%20a%20ROS2%20Python%20Node.md), [3.6 - Creating a ROS2 Python Node with OOP](3.6%20-%20Creating%20a%20ROS2%20Python%20Node%20with%20OOP.md), [3.7 - Creating a ROS2 C++ Node](3.7%20-%20Creating%20a%20ROS2%20C++%20Node.md), and [3.8 - Creating a ROS2 C++ Node with OOP](3.8%20-%20Creating%20a%20ROS2%20C++%20Node%20with%20OOP.md). You’ll review the `ros2 run` command, learn the `ros2 node` command for listing and inspecting nodes, and understand the importance of sourcing the workspace and avoiding duplicate node names. This tutorial is based on the [ROS2 for Beginners](https://www.udemy.com/course/ros2-for-beginners/) Udemy course and aligns with the ROS2 client libraries explained in [3.9 - Understanding ROS2 Client Libraries](3.9%20-%20Understanding%20ROS2%20Client%20Libraries.md).

## Prerequisites

- **ROS2 Workspace and Packages**: A ROS2 workspace (e.g., `~/ros2_ws`) with Python (`my_py_pkg`) and C++ (`my_cpp_pkg`) packages, containing nodes (`py_node`, `cpp_node`), as set up in [3.1 - ROS2 Workspace Setup Tutorial](3.1%20-%20ROS2%20Workspace%20Setup%20Tutorial.md) to [3.8](3.8%20-%20Creating%20a%20ROS2%20C++%20Node%20with%20OOP.md).
- **ROS2 Installation**: ROS2 Jazzy installed in `/opt/ros/jazzy`. Follow the [official ROS2 installation guide](https://docs.ros.org/en/jazzy/Installation.html) if not installed.
- **Development Tools**: A terminal emulator (e.g., Terminator, recommended for multiple panes) and a text editor (e.g., VSCode) to view `.bashrc` or node code if needed:
  ```bash
  sudo apt install terminator
  sudo snap install code --classic
  ```
- **Terminal**: A `bash`-compatible terminal with the workspace sourced (e.g., `source ~/ros2_ws/install/setup.bash` in `~/.bashrc`).

## Step 1: Verify Workspace Sourcing

Ensure your terminal is correctly sourced to access ROS2 commands and your workspace’s executables.

1. **Check ~/.bashrc**:
   Open `~/.bashrc` to verify sourcing:
   ```bash
   cat ~/.bashrc
   ```
   Look for lines at the end, similar to:
   ```bash
   source /opt/ros/jazzy/setup.bash
   source ~/ros2_ws/install/setup.bash
   ```
   - The first line sources the global ROS2 Jazzy installation.
   - The second line sources your workspace, making `my_py_pkg` and `my_cpp_pkg` executables available.

   **Note**: Replace `jazzy` with your ROS2 distribution if different (e.g., `humble`). If these lines are missing, add them as shown in [3.1](3.1%20-%20ROS2%20Workspace%20Setup%20Tutorial.md).

   ![bashrc Verification](images/bashrc_verification.png "Terminal showing cat ~/.bashrc with ROS2 sourcing")

2. **Open a New Terminal**:
   Open a new terminal to ensure `~/.bashrc` is executed:
   ```bash
   terminator
   ```
   Alternatively, source manually in the current terminal:
   ```bash
   source ~/.bashrc
   ```

3. **Test Sourcing**:
   Verify ROS2 commands work:
   ```bash
   ros2 --help
   ```
   Expected output: A list of ROS2 CLI commands (e.g., `run`, `node`, `topic`).

   **Troubleshooting**: If `ros2: command not found`, ensure `/opt/ros/jazzy/setup.bash` is sourced. If `my_py_pkg` or `my_cpp_pkg` are not found later, ensure `~/ros2_ws/install/setup.bash` is sourced.

## Step 2: Review the ros2 run Command

Use `ros2 run` to launch nodes, reviewing its usage with global and workspace-specific executables.

1. **Explore ros2 CLI**:
   List available ROS2 commands:
   ```bash
   ros2 <tab><tab>
   ```
   Output includes `run`, `node`, `topic`, etc. This confirms the ROS2 environment is active.

2. **Run a Global Node**:
   Launch a demo node from the global ROS2 installation:
   ```bash
   ros2 run demo_nodes_cpp talker
   ```
   - **Command Breakdown**:
     - `demo_nodes_cpp`: Package name (use Tab for autocompletion).
     - `talker`: Executable name (use Tab twice to list options).
   - **Output**: The node starts, publishing messages (e.g., `[INFO] [talker]: Publishing: 'Hello World: 1'`).
   - **Stop**: Press Ctrl+C to stop the node.

   **Note**: `demo_nodes_cpp` is part of ROS2 Jazzy’s example packages, installed globally.

3. **Run Workspace Nodes**:
   Launch the Python and C++ nodes from your workspace:
   - **Python Node**:
     ```bash
     ros2 run my_py_pkg py_node
     ```
     - Output (from [3.6](3.6%20-%20Creating%20a%20ROS2%20Python%20Node%20with%20OOP.md)):
       ```
       [INFO] [timestamp] [py_test]: Hello World
       [INFO] [timestamp] [py_test]: Hello 0
       [INFO] [timestamp] [py_test]: Hello 1
       ...
       ```
     - Stop with Ctrl+C.
   - **C++ Node**:
     ```bash
     ros2 run my_cpp_pkg cpp_node
     ```
     - Output (from [3.8](3.8%20-%20Creating%20a%20ROS2%20C++%20Node%20with%20OOP.md)):
       ```
       [INFO] [timestamp] [cpp_test]: Hello World
       [INFO] [timestamp] [cpp_test]: Hello 0
       [INFO] [timestamp] [cpp_test]: Hello 1
       ...
       ```
     - Stop with Ctrl+C.

   **Autocompletion**: Use Tab to complete `my_py_pkg`, `my_cpp_pkg`, `py_node`, or `cpp_node`. If autocompletion fails, re-source the workspace:
   ```bash
   source ~/ros2_ws/install/setup.bash
   ```

4. **Test Unsourced Workspace**:
   Simulate an unsourced workspace to understand errors:
   - Edit `~/.bashrc` to comment out the workspace source line:
     ```bash
     nano ~/.bashrc
     ```
     Change:
     ```bash
     source ~/ros2_ws/install/setup.bash
     ```
     to:
     ```bash
     # source ~/ros2_ws/install/setup.bash
     ```
     Save and exit.
   - Open a new terminal:
     ```bash
     terminator
     ```
   - Try running a workspace node:
     ```bash
     ros2 run my_py_pkg py_node
     ```
     - **Output**: `Package 'my_py_pkg' not found`.
     - **Reason**: The workspace is not sourced, so `my_py_pkg` is unavailable.
   - Restore `~/.bashrc`:
     ```bash
     nano ~/.bashrc
     ```
     Uncomment the line, save, and source:
     ```bash
     source ~/.bashrc
     ```
   - Retry:
     ```bash
     ros2 run my_py_pkg py_node
     ```
     The node should now run correctly.

   ![Package Not Found](images/package_not_found.png "Terminal showing package not found error")

## Step 3: Introspect Nodes with ros2 node

Use the `ros2 node` command to list running nodes and inspect their details.

1. **Open Multiple Terminals**:
   Use Terminator to open four terminal panes for simultaneous node execution and introspection:
   ```bash
   terminator
   ```
   Split the window into four panes (right-click > Split Horizontally/Vertically, or see the course’s installation section).

2. **List Running Nodes**:
   In one terminal, check for running nodes:
   ```bash
   ros2 node list
   ```
   - **Output**: Empty (no nodes running initially).
   - **Purpose**: Lists the names of all active nodes in the ROS2 network.

3. **Run Nodes**:
   In separate terminals, start your workspace nodes:
   - Terminal 1 (Python node):
     ```bash
     ros2 run my_py_pkg py_node
     ```
     Output shows `[py_test]` logging “Hello World” and counter.
   - Terminal 2 (C++ node):
     ```bash
     ros2 run my_cpp_pkg cpp_node
     ```
     Output shows `[cpp_test]` logging “Hello World” and counter.

4. **List Nodes Again**:
   In Terminal 3, run:
   ```bash
   ros2 node list
   ```
   - **Output**:
     ```
     /cpp_test
     /py_test
     ```
   - **Explanation**: The node names (`py_test`, `cpp_test`) from [3.6](3.6%20-%20Creating%20a%20ROS2%20Python%20Node%20with%20OOP.md) and [3.8](3.8%20-%20Creating%20a%20ROS2%20C++%20Node%20with%20OOP.md) appear, prefixed with a slash (`/`), indicating their ROS2 namespace (default namespace).

   ![Node List Output](images/node_list_output.png "Terminal showing ros2 node list with /py_test and /cpp_test")

5. **Inspect Node Details**:
   In Terminal 4, get details about a specific node:
   ```bash
   ros2 node info /cpp_test
   ```
   - **Output** (example):
     ```
     /cpp_test
       Subscribers:
         /parameter_events: rcl_interfaces/msg/ParameterEvent
       Publishers:
         /parameter_events: rcl_interfaces/msg/ParameterEvent
         /rosout: rcl_interfaces/msg/Log
       Service Servers:
         /cpp_test/describe_parameters: rcl_interfaces/srv/DescribeParameters
         /cpp_test/get_parameter_types: rcl_interfaces/srv/GetParameterTypes
         /cpp_test/get_parameters: rcl_interfaces/srv/GetParameters
         /cpp_test/list_parameters: rcl_interfaces/srv/ListParameters
         /cpp_test/set_parameters: rcl_interfaces/srv/SetParameters
         /cpp_test/set_parameters_atomically: rcl_interfaces/srv/SetParametersAtomically
       Service Clients:
       Action Servers:
       Action Clients:
     ```
   - **Explanation**:
     - Lists the node’s **subscribers**, **publishers**, **service servers**, etc., used for ROS2 communication (e.g., topics, services).
     - Default entries (e.g., `/parameter_events`, `/rosout`) handle parameters and logging, present in all nodes.
     - No custom topics or services appear, as the nodes from [3.6](3.6%20-%20Creating%20a%20ROS2%20Python%20Node%20with%20OOP.md) and [3.8](3.8%20-%20Creating%20a%20ROS2%20C++%20Node%20with%20OOP.md) only use timers.
   - Repeat for the Python node:
     ```bash
     ros2 node info /py_test
     ```
     Output is similar, showing default communication interfaces.

6. **Get Help**:
   Explore `ros2 node` options:
   ```bash
   ros2 node --help
   ```
   - Output lists subcommands (`list`, `info`, etc.).
   - For specific help:
     ```bash
     ros2 node list --help
     ros2 node info --help
     ```

   ![Node Info Output](images/node_info_output.png "Terminal showing ros2 node info /cpp_test output")

7. **Stop Nodes**:
   In Terminals 1 and 2, press Ctrl+C to stop `py_node` and `cpp_node`. Verify no nodes are running:
   ```bash
   ros2 node list
   ```
   Output should be empty.

## Step 4: Understand Node Name Uniqueness

Learn why ROS2 requires unique node names and what happens if duplicates occur.

1. **Node Name Rule**:
   - ROS2 does not allow multiple nodes with the same name in the same network (namespace).
   - Node names (e.g., `/py_test`, `/cpp_test`) are set in code (`Node("py_test")` in Python, `Node("cpp_test")` in C++).
   - Running a second instance of a node with the same name causes the first instance to terminate.

2. **Test Duplicate Names**:
   - In Terminal 1, start the Python node:
     ```bash
     ros2 run my_py_pkg py_node
     ```
     Output shows `/py_test` running.
   - In Terminal 2, try starting another instance:
     ```bash
     ros2 run my_py_pkg py_node
     ```
     - **Result**: The first instance (Terminal 1) terminates with an error (e.g., `[rcl]: Node name '/py_test' already exists`), and the second instance starts.
   - In Terminal 3, check nodes:
     ```bash
     ros2 node list
     ```
     Output shows only one `/py_test`, confirming only one node runs.

3. **Avoiding Duplicates**:
   - Ensure unique node names in code (e.g., change `Node("py_test")` to `Node("py_test_2")` for a second node).
   - Use **remapping** or **namespaces** (covered in the next tutorial, as hinted by the transcript’s “next video”) to run multiple instances with different names.
   - Example (preview): Remap a node name at runtime:
     ```bash
     ros2 run my_py_pkg py_node --ros-args -r __node:=py_test_2
     ```
     This runs a second instance named `/py_test_2`, avoiding conflict.

## Key Concepts

- **Workspace Sourcing**: Sourcing `~/ros2_ws/install/setup.bash` makes workspace executables (`py_node`, `cpp_node`) available. Without it, `ros2 run` fails with “package not found.”
- **ros2 run**: Launches nodes by specifying the package and executable names, supporting autocompletion for ease.
- **ros2 node list**: Lists all running nodes by their names (e.g., `/py_test`), reflecting the ROS2 network state.
- **ros2 node info**: Displays a node’s communication interfaces (subscribers, publishers, services), useful for debugging and understanding node behavior.
- **Node Name Uniqueness**: ROS2 enforces unique node names to prevent conflicts, terminating older instances if duplicates are launched.
- **Terminator**: A terminal emulator for managing multiple panes, ideal for running and introspecting nodes simultaneously.
- **Autocompletion**: Tab completion for `ros2` commands, package names, and executables saves time and reduces errors.

## Notes

- **Sourcing Importance**: Always source the workspace after building or in new terminals. Add to `~/.bashrc` for convenience, as shown in [3.1](3.1%20-%20ROS2%20Workspace%20Setup%20Tutorial.md).
- **Node Names vs. Executables**: Node names (`py_test`, `cpp_test`) are set in code, while executable names (`py_node`, `cpp_node`) are set in `setup.py` or `CMakeLists.txt`. The transcript’s “pi node” and “CP node” are clarified as `py_node` and `cpp_node`.
- **Default Interfaces**: `ros2 node info` shows default subscribers/publishers (e.g., `/parameter_events`, `/rosout`) for parameters and logging, present in all nodes.
- **ROS2 CLI**: The `ros2` CLI is extensible, with commands like `topic`, `service`, and `param` to be covered in future tutorials.
- **Terminator Setup**: The transcript references the course’s installation section for Terminator setup. Install via `sudo apt install terminator` and split panes as needed.
- **Next Tutorial**: The transcript’s “next video” likely covers node name remapping or namespaces to handle multiple instances, as hinted by the duplicate name discussion.

## Next Steps

You’ve learned to run and introspect ROS2 nodes using `ros2 run` and `ros2 node`. In future tutorials, you’ll:
- Use **node name remapping** or **namespaces** to run multiple instances of the same node without conflicts.
- Explore other ROS2 CLI commands (e.g., `ros2 topic`, `ros2 service`) to inspect communication.
- Add topics or services to your nodes ([3.6](3.6%20-%20Creating%20a%20ROS2%20Python%20Node%20with%20OOP.md), [3.8](3.8%20-%20Creating%20a%20ROS2%20C++%20Node%20with%20OOP.md)) and inspect them with `ros2 node info`.

For more details, refer to the [ROS2 Documentation](https://docs.ros.org/en/jazzy/index.html) or continue with the [ROS2 for Beginners](https://www.udemy.com/course/ros2-for-beginners/) course.