# 9.4 - Adding Remappings and Node Renaming in a ROS2 Launch File

This tutorial enhances the XML launch file from [9.2 - Creating and Installing a ROS2 Launch File](Section%209%20-%20ROS2%20Launch%20Files/9.2%20-%20Creating%20and%20Installing%20a%20ROS2%20Launch%20File.md) by adding node renaming and topic remapping for the `number_publisher` (Python) and `number_counter` (C++) nodes in the `my_py_pkg` and `my_cpp_pkg` packages. It demonstrates these features in XML, briefly shows the equivalent Python syntax, and verifies the changes using ROS2 CLI tools and RQT Graph. The tutorial builds on [9.1 - What is a ROS2 Launch File?](Section%209%20-%20ROS2%20Launch%20Files/9.1%20-%20What%20is%20a%20ROS2%20Launch%20File%3F.md), [9.2 - Creating and Installing a ROS2 Launch File](Section%209%20-%20ROS2%20Launch%20Files/9.2%20-%20Creating%20and%20Installing%20a%20ROS2%20Launch%20File.md), [9.3 - Writing Python Launch Files (Python vs. XML)](Section%209%20-%20ROS2%20Launch%20Files/9.3%20-%20Writing%20Python%20Launch%20Files%20(Python%20vs.%20XML).md), parameters from [8.1 - What is a ROS2 Parameter](Section%208%20-%20ROS2%20Parameters/8.1%20-%20What%20is%20a%20ROS2%20Parameter.md) through [8.3 - Using ROS2 Parameters in Python](Section%208%20-%20ROS2%20Parameters/8.3%20-%20Using%20ROS2%20Parameters%20in%20Python.md), services from [6.1 - What is a ROS2 Service](Section%206%20-%20ROS2%20Services/6.1%20-%20What%20is%20a%20ROS2%20Service.md) through [6.6 - Writing a C++ Service Client (Non-OOP)](Section%206%20-%20ROS2%20Services/6.6%20-%20Writing%20a%20C%2B%2B%20Service%20Client%20(Non-OOP).md), and topics from [5.1 - What is a ROS2 Topic](Section%205%20-%20ROS2%20Communication/5.1%20-%20What%20is%20a%20ROS2%20Topic.md) through [5.9 - Experimenting with ROS2 Topics Using Turtlesim](Section%205%20-%20ROS2%20Communication/5.9%20-%20Experimenting%20with%20ROS2%20Topics%20Using%20Turtlesim.md). It is part of the [ROS2 for Beginners](https://www.udemy.com/course/ros2-for-beginners/) Udemy course and targets ROS2 Jazzy Jalisco on Ubuntu 24.04.

## Prerequisites

- **ROS2 Installation**: ROS2 Jazzy installed in `/opt/ros/jazzy` (via `ros-jazzy-desktop`). Source the environment:
  ```bash
  source /opt/ros/jazzy/setup.bash
  ```
  See the [ROS2 Installation Guide](https://docs.ros.org/en/jazzy/Installation.html) if not installed.
- **ROS2 Workspace**: A ROS2 workspace (`~/ros2_ws`) with `my_py_pkg`, `my_cpp_pkg`, and `my_robot_bringup`, set up in [3.1 - ROS2 Workspace Setup Tutorial](Section%203%20-%20Your%20First%20ROS2%20Program/3.1%20-%20ROS2%20Workspace%20Setup%20Tutorial.md), [3.2 - Creating a ROS2 Python Package](Section%203%20-%20Your%20First%20ROS2%20Program/3.2%20-%20Creating%20a%20ROS2%20Python%20Package.md), [3.3 - Creating a ROS2 C++ Package](Section%203%20-%20Your%20First%20ROS2%20Program/3.3%20-%20Creating%20a%20ROS2%20C%2B%2B%20Package.md), and [9.2 - Creating and Installing a ROS2 Launch File](Section%209%20-%20ROS2%20Launch%20Files/9.2%20-%20Creating%20and%20Installing%20a%20ROS2%20Launch%20File.md). Source the workspace:
  ```bash
  source ~/ros2_ws/install/setup.bash
  ```
- **Package Dependencies**: Ensure `my_robot_bringup`’s `package.xml` includes `<exec_depend>my_py_pkg</exec_depend>` and `<exec_depend>my_cpp_pkg</exec_depend>`, and `my_py_pkg` and `my_cpp_pkg` include `rclpy`, `rclcpp`, and `example_interfaces` (from [5.2 - Writing a Python Publisher](Section%205%20-%20ROS2%20Communication/5.2%20-%20Writing%20a%20Python%20Publisher.md) and [5.4 - Writing a C++ Publisher](Section%205%20-%20ROS2%20Communication/5.4%20-%20Writing%20a%20C%2B%2B%20Publisher.md)).
- **Nodes**: The `number_publisher` (Python) and `number_counter` (C++) nodes from [5.2 - Writing a Python Publisher](Section%205%20-%20ROS2%20Communication/5.2%20-%20Writing%20a%20Python%20Publisher.md) and [5.5 - Writing a C++ Subscriber](Section%205%20-%20ROS2%20Communication/5.5%20-%20Writing%20a%20C%2B%2B%20Subscriber.md), publishing to `/number` and subscribing to `/number` with a counter on `/number_count`.
- **Launch Knowledge**: Understanding of launch files, XML format, and Python basics from [9.1 - What is a ROS2 Launch File?](Section%209%20-%20ROS2%20Launch%20Files/9.1%20-%20What%20is%20a%20ROS2%20Launch%20File%3F.md), [9.2 - Creating and Installing a ROS2 Launch File](Section%209%20-%20ROS2%20Launch%20Files/9.2%20-%20Creating%20and%20Installing%20a%20ROS2%20Launch%20File.md), and [9.3 - Writing Python Launch Files (Python vs. XML)](Section%209%20-%20ROS2%20Launch%20Files/9.3%20-%20Writing%20Python%20Launch%20Files%20(Python%20vs.%20XML).md).
- **CLI Tools**: Familiarity with `ros2 launch`, `ros2 node`, `ros2 topic`, and `rqt_graph` from [4.1 - Introspecting Nodes with ROS2 CLI](Section%204%20-%20Introduction%20to%20ROS2%20Tools/4.1%20-%20Introspecting%20Nodes%20with%20ROS2%20CLI.md) and [5.6 - Introspecting ROS2 Topics with Command Line Tools](Section%205%20-%20ROS2%20Communication/5.6%20-%20Introspecting%20ROS2%20Topics%20with%20Command%20Line%20Tools.md).
- **Development Tools**:
  - A `bash`-compatible terminal (e.g., Terminator: `sudo apt install terminator`).
  - Visual Studio Code (`code`): `sudo snap install --classic code`.

## Understanding Node Renaming and Remapping

- **Node Renaming**:
  - Changes a node’s name at runtime, equivalent to `ros2 run <package> <executable> --ros-args --remap __node:=<new_name>`.
  - Useful for running multiple instances of the same node without conflicts.
  - In XML: Use the `name` attribute in the `<node>` tag.
  - In Python: Use the `name` parameter in the `Node` action.

- **Topic/Service Remapping**:
  - Changes a topic or service name at runtime, equivalent to `ros2 run <package> <executable> --ros-args --remap <old_name>:=<new_name>`.
  - Ensures nodes communicate on the intended topics/services, especially when default names conflict.
  - In XML: Use the `<remap>` tag with `from` and `to` attributes inside the `<node>` tag.
  - In Python: Use the `remappings` parameter as a list of tuples (`[(old_name, new_name)]`).

- **Why Use in Launch Files?**
  - Centralizes configuration, avoiding manual `--ros-args` in multiple terminals.
  - Ensures consistent naming across launches, reducing errors.
  - Simplifies complex applications with multiple nodes and interfaces.

## Step-by-Step Instructions

### Step 1: Verify the Bringup Package

Ensure the `my_robot_bringup` package from [9.2 - Creating and Installing a ROS2 Launch File](Section%209%20-%20ROS2%20Launch%20Files/9.2%20-%20Creating%20and%20Installing%20a%20ROS2%20Launch%20File.md) is set up.

1. **Check Package Structure**:
   ```bash
   cd ~/ros2_ws/src/my_robot_bringup
   ls
   ```
   **Expected Output**:
   ```
   CMakeLists.txt  launch  package.xml
   ```
   Verify the `launch/` folder:
   ```bash
   ls launch
   ```
   **Expected Output**:
   ```
   number_app.launch.xml  number_app.launch.py  number_app_from_python.launch.xml
   ```

2. **Verify package.xml**:
   Open `package.xml`:
   ```bash
   code package.xml
   ```
   Confirm `<exec_depend>my_py_pkg</exec_depend>` and `<exec_depend>my_cpp_pkg</exec_depend>`.

3. **Verify CMakeLists.txt**:
   Open `CMakeLists.txt`:
   ```bash
   code CMakeLists.txt
   ```
   Confirm:
   ```cmake
   install(DIRECTORY
     launch
     DESTINATION share/${PROJECT_NAME}/
   )
   ```

**Screenshot**: `my_robot_bringup` package structure (reused from 9.2):

![Bringup Package Structure](images/my_robot_bringup_structure.png "my_robot_bringup package with launch folder")

### Step 2: Update the XML Launch File

Modify `number_app.launch.xml` to rename the nodes and remap the `/number` topic to `/my_number`.

1. **Navigate to Launch Folder**:
   ```bash
   cd ~/ros2_ws/src/my_robot_bringup/launch
   ```

2. **Edit the Launch File**:
   Open `number_app.launch.xml`:
   ```bash
   code number_app.launch.xml
   ```
   Update to:

   ```xml
   <launch>
       <node pkg="my_py_pkg" exec="number_publisher" name="my_number_publisher">
           <remap from="number" to="my_number"/>
       </node>
       <node pkg="my_cpp_pkg" exec="number_counter" name="my_number_counter">
           <remap from="number" to="my_number"/>
       </node>
   </launch>
   ```

   **Changes**:
   - Added `name="my_number_publisher"` to rename the publisher node.
   - Added `name="my_number_counter"` to rename the counter node.
   - Expanded `<node>` tags to include `<remap>` tags.
   - Added `<remap from="number" to="my_number"/>` in both nodes to remap the `/number` topic to `/my_number`.
   - Ensured both nodes use `/my_number` to maintain communication.

**Screenshot**: Updated `number_app.launch.xml` in VS Code:

![Updated Number App Launch](images/number_app_launch_xml_remap.png "number_app.launch.xml with remapping and renaming")

### Step 3: (Optional) Update the Python Launch File

For reference, update `number_app.launch.py` to include the same renaming and remapping.

1. **Edit the Python Launch File**:
   Open `number_app.launch.py`:
   ```bash
   code number_app.launch.py
   ```
   Update to:

   ```python
   from launch import LaunchDescription
   from launch_ros.actions import Node

   def generate_launch_description():
       ld = LaunchDescription()

       number_publisher_node = Node(
           package='my_py_pkg',
           executable='number_publisher',
           name='my_number_publisher',
           remappings=[('number', 'my_number')]
       )

       number_counter_node = Node(
           package='my_cpp_pkg',
           executable='number_counter',
           name='my_number_counter',
           remappings=[('number', 'my_number')]
       )

       ld.add_action(number_publisher_node)
       ld.add_action(number_counter_node)

       return ld
   ```

   **Changes**:
   - Added `name='my_number_publisher'` and `name='my_number_counter'` to rename the nodes.
   - Added `remappings=[('number', 'my_number')]` to remap `/number` to `/my_number` in both nodes.
   - `remappings` uses a list of tuples, where each tuple is `(old_name, new_name)`.

**Screenshot**: Updated `number_app.launch.py` in VS Code:

![Updated Number App Python Launch](images/number_app_launch_py_remap.png "number_app.launch.py with remapping and renaming")

### Step 4: Build the Package

Build `my_robot_bringup` to install the updated launch files.

1. **Navigate to Workspace**:
   ```bash
   cd ~/ros2_ws
   ```

2. **Build the Package**:
   ```bash
   colcon build --packages-select my_robot_bringup
   ```

3. **Source the Workspace**:
   ```bash
   source install/setup.bash
   ```

**Screenshot**: `colcon build` output:

![Colcon Build Bringup](images/colcon_build_my_robot_bringup_remap.png "colcon build for my_robot_bringup with remapping")

### Step 5: Run and Test the XML Launch File

Test the updated `number_app.launch.xml` to verify renaming and remapping.

1. **Run the Launch File**:
   ```bash
   source ~/ros2_ws/install/setup.bash
   ros2 launch my_robot_bringup number_app.launch.xml
   ```
   **Expected Output**:
   ```
   [INFO] [launch]: All log files can be found below /home/user/.ros/log/...
   [INFO] [launch]: Default logging verbosity is set to INFO
   [INFO] [number_publisher-1]: process started with pid [12345]
   [INFO] [number_counter-2]: process started with pid [12346]
   [INFO] [number_publisher-1]: Publishing: 1
   [INFO] [number_counter-2]: Count: 1
   [INFO] [number_publisher-1]: Publishing: 2
   [INFO] [number_counter-2]: Count: 2
   ...
   ```
   Note: Logs show executable names (`number_publisher`, `number_counter`), not node names.

2. **Verify Node Names**:
   In a new terminal:
   ```bash
   source ~/ros2_ws/install/setup.bash
   ros2 node list
   ```
   **Expected Output**:
   ```
   /my_number_counter
   /my_number_publisher
   ```

3. **Verify Topics**:
   ```bash
   ros2 topic list
   ```
   **Expected Output**:
   ```
   /my_number
   /number_count
   /parameter_events
   /rosout
   ```
   Echo `/my_number`:
   ```bash
   ros2 topic echo /my_number
   ```
   **Expected Output**:
   ```
   data: 1
   ---
   data: 2
   ---
   ...
   ```

4. **Visualize with RQT Graph**:
   ```bash
   rqt_graph
   ```
   - Uncheck “Hide Dead Sinks” and “Hide Debug”.
   - Select “Nodes/Topics (all)” to see `/my_number_publisher` → `/my_number` → `/my_number_counter` → `/number_count`.

**Screenshot**: RQT Graph with remapped topic:

![RQT Graph Remapped](images/rqt_graph_number_app_remap.png "RQT Graph for number_app.launch.xml with remapping")

### Step 6: (Optional) Test the Python Launch File

Test `number_app.launch.py` to confirm identical behavior.

1. **Run the Python Launch File**:
   ```bash
   ros2 launch my_robot_bringup number_app.launch.py
   ```
   **Expected Output**: Same as XML (PIDs may differ).

2. **Verify Nodes and Topics**:
   Repeat `ros2 node list`, `ros2 topic list`, `ros2 topic echo /my_number`, and `rqt_graph`. Results should match the XML launch file.

### Step 7: Understand the Workflow

- **Node Renaming**:
  - XML: `name="my_number_publisher"` in `<node>` renames the node, equivalent to `--ros-args --remap __node:=my_number_publisher`.
  - Python: `name='my_number_publisher'` in `Node` achieves the same.
  - Verified via `ros2 node list` showing `/my_number_publisher` and `/my_number_counter`.

- **Topic Remapping**:
  - XML: `<remap from="number" to="my_number"/>` inside `<node>` remaps `/number` to `/my_number`.
  - Python: `remappings=[('number', 'my_number')]` in `Node` does the same.
  - Both nodes must remap `/number` to `/my_number` to communicate.
  - Verified via `ros2 topic list` showing `/my_number` and `rqt_graph` showing the updated topic.

- **XML vs. Python**:
  - XML: 8 lines, concise, using `<remap>` tags.
  - Python: ~24 lines, verbose, using `remappings` lists.
  - XML is simpler and preferred, as per [9.3 - Writing Python Launch Files (Python vs. XML)](Section%209%20-%20ROS2%20Launch%20Files/9.3%20-%20Writing%20Python%20Launch%20Files%20(Python%20vs.%20XML).md).

- **Why Remap?**
  - Avoids topic name conflicts in multi-node systems.
  - Aligns node communication with application-specific naming conventions.
  - Centralizes configuration in the launch file, reducing manual CLI arguments.

### Troubleshooting

- **Nodes Not Renamed**:
  - Verify `name` attribute in XML (`name="my_number_publisher"`) or Python (`name='my_number_publisher'`).
  - Check `ros2 node list` for correct names.
- **Topic Not Remapped**:
  - Ensure both nodes remap `/number` to `/my_number` (publisher and subscriber).
  - Verify `<remap from="number" to="my_number"/>` or `remappings=[('number', 'my_number')]`.
  - Check `ros2 topic list` and `rqt_graph`.
- **Launch File Errors**:
  - XML: Confirm `<node>` tags are properly opened/closed, and `<remap>` is inside `<node>`.
  - Python: Check for syntax errors, correct imports, and tuple format in `remappings`.
  - Run with `--show-all`: `ros2 launch my_robot_bringup number_app.launch.xml --show-all`.
- **No Communication**:
  - Confirm both nodes use the same topic name (`/my_number`).
  - Check node execution: `ros2 node list`.
  - Inspect `rqt_graph` for topic connections.
- **Build Issues**:
  - Ensure `install(DIRECTORY launch DESTINATION share/${PROJECT_NAME}/)` in `CMakeLists.txt`.
  - Verify `<exec_depend>` in `package.xml`.

### Notes

- **Fact-Checking**:
  - **Node Renaming**: XML `name` attribute and Python `name` parameter rename nodes, per [ROS2 Launch XML](https://docs.ros.org/en/jazzy/api/launch/xml_syntax.html#node) and [ROS2 Launch Python](https://docs.ros.org/en/jazzy/api/launch_ros/launch_ros.actions.Node.html).
  - **Remapping**: XML `<remap from="..." to="..."/>` and Python `remappings=[(...)]` remap topics/services, per [ROS2 Remapping](https://docs.ros.org/en/jazzy/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.html#remapping).
  - **XML Simplicity**: XML is preferred for static configurations, per [ROS2 Launch Best Practices](https://docs.ros.org/en/jazzy/Tutorials/Intermediate/Launch/Creating-Launch-Files.html#choosing-a-launch-file-format).
  - **Topic Verification**: `ros2 topic list`, `ros2 topic echo`, and `rqt_graph` confirm remappings, per [ROS2 CLI Tools](https://docs.ros.org/en/jazzy/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.html).

- **Transcript Clarifications**:
  - Corrected “Ros” to “ROS2” and “dash dash args” to `--ros-args`.
  - Specified `--remap` for renaming/remapping (e.g., `--remap __node:=<name>`, `--remap number:=my_number`).
  - Clarified that both nodes need remapping to communicate on `/my_number`.
  - Noted executable names in logs vs. node names in `ros2 node list`.
  - Included Python example for completeness, emphasizing XML preference.

- **Repository Structure**:
  - Places tutorial in `Section 9 - ROS2 Launch Files/`, following 9.1–9.3.
  - Uses `images/` for three new screenshots: `number_app_launch_xml_remap.png`, `number_app_launch_py_remap.png`, `colcon_build_my_robot_bringup_remap.png`, `rqt_graph_number_app_remap.png`. Reuses `my_robot_bringup_structure.png` from 9.2.

- **Images**:
  - Create screenshots for `images/`:
    - `number_app_launch_xml_remap.png`: Updated `number_app.launch.xml` in VS Code.
    - `number_app_launch_py_remap.png`: Updated `number_app.launch.py` in VS Code.
    - `colcon_build_my_robot_bringup_remap.png`: `colcon build` output.
    - `rqt_graph_number_app_remap.png`: RQT Graph showing `/my_number`.
    - Reuse `my_robot_bringup_structure.png` from 9.2.
  - Use GNOME Screenshot or Shutter.

- **Best Practices**:
  - Use XML for concise, readable launch files.
  - Rename nodes to avoid conflicts in multi-node setups.
  - Remap topics/services consistently across communicating nodes.
  - Verify changes with `ros2 node list`, `ros2 topic list`, and `rqt_graph`.
  - Keep launch files modular and descriptive (e.g., `number_app.launch.xml`).

## Next Steps

You’ve added node renaming and topic remapping to an XML launch file and seen the Python equivalent. Next, you’ll:
- Add parameters to launch files, building on [8.1 - What is a ROS2 Parameter](Section%208%20-%20ROS2%20Parameters/8.1%20-%20What%20is%20a%20ROS2%20Parameter.md) (e.g., `9.5 - Adding Parameters to ROS2 Launch Files`).
- Use YAML files for parameters in launch files.
- Create complex launch files with namespaces and groups.
- Launch `turtlesim` nodes, extending [4.5 - Discover Turtlesim](Section%204%20-%20Introduction%20to%20ROS2%20Tools/4.5%20-%20Discover%20Turtlesim.md).
- Explore advanced features like launch arguments or event handlers.

For more details, refer to the [ROS2 Documentation](https://docs.ros.org/en/jazzy/index.html) or the [ROS2 for Beginners](https://www.udemy.com/course/ros2-for-beginners/) course.