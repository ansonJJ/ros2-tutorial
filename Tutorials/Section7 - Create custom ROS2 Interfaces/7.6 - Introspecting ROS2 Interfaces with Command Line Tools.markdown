# 7.6 - Introspecting ROS2 Interfaces with Command Line Tools

This tutorial demonstrates how to use ROS2 command line tools to introspect interfaces, including the custom `HardwareStatus.msg` and `ComputeRectangleArea.srv` from `my_robot_interfaces` (created in [7.2](Section%207%20-%20ROS2%20Interfaces/7.2%20-%20Create%20and%20Build%20Your%20First%20Custom%20Message.md) and [7.5](Section%207%20-%20ROS2%20Interfaces/7.5%20-%20Create%20and%20Build%20Your%20First%20Custom%20Service.md)), as well as standard interfaces from packages like `example_interfaces` and `sensor_msgs`. You’ll learn to use `ros2 interface show`, `ros2 interface list`, `ros2 interface package`, and related commands (`ros2 node`, `ros2 topic`, `ros2 service`) to discover interface definitions and their usage in nodes, topics, and services. The tutorial emphasizes the importance of sourcing terminals after building interfaces or nodes. It is part of the [ROS2 for Beginners](https://www.udemy.com/course/ros2-for-beginners/) Udemy course and targets **ROS2 Jazzy Jalisco** on **Ubuntu 24.04**.

## Prerequisites

- **ROS2 Installation**: ROS2 Jazzy installed in `/opt/ros/jazzy` (via `ros-jazzy-desktop`), including `my_robot_interfaces`, `example_interfaces`, and `sensor_msgs`. Source the environment:
  ```bash
  source /opt/ros/jazzy/setup.bash
  ```
  See the [ROS2 Installation Guide](https://docs.ros.org/en/jazzy/Installation.html) if not installed.
- **ROS2 Workspace**: A ROS2 workspace (`~/ros2_ws`) with `my_py_pkg`, `my_cpp_pkg`, and `my_robot_interfaces`, set up in [3.1](Section%203%20-%20Your%20First%20ROS2%20Program/3.1%20-%20ROS2%20Workspace%20Setup%20Tutorial.md), [3.2](Section%203%20-%20Your%20First%20ROS2%20Program/3.2%20-%20Creating%20a%20ROS2%20Python%20Package.md), [3.3](Section%203%20-%20Your%20First%20ROS2%20Program/3.3%20-%20Creating%20a%20ROS2%20C%2B%2B%20Package.md), [7.2](Section%207%20-%20ROS2%20Interfaces/7.2%20-%20Create%20and%20Build%20Your%20First%20Custom%20Message.md), and [7.5](Section%207%20-%20ROS2%20Interfaces/7.5%20-%20Create%20and%20Build%20Your%20First%20Custom%20Service.md). Source the workspace:
  ```bash
  source ~/ros2_ws/install/setup.bash
  ```
  Ensure `~/.bashrc` sources the workspace for new terminals:
  ```bash
  echo "source /opt/ros/jazzy/setup.bash" >> ~/.bashrc
  echo "source ~/ros2_ws/install/setup.bash" >> ~/.bashrc
  ```
- **Custom Interfaces**:
  - `HardwareStatus.msg` (from 7.2):
    ```
    float64 temperature
    bool are_motors_ready
    string debug_message
    ```
  - `ComputeRectangleArea.srv` (from 7.5):
    ```
    float64 length
    float64 width
    ---
    float64 area
    ```
- **Nodes**: Nodes from [7.3](Section%207%20-%20ROS2%20Interfaces/7.3%20-%20Using%20a%20Custom%20Message%20in%20a%20Python%20Node.md) (`hardware_status_publisher` in `my_py_pkg`), [7.4](Section%207%20-%20ROS2%20Interfaces/7.4%20-%20Using%20a%20Custom%20Message%20in%20a%20C%2B%2B%20Node.md) (`hw_status_publisher` in `my_cpp_pkg`), and [6.3](Section%206%20-%20ROS2%20Services/6.3%20-%20Writing%20a%20Python%20Service%20Server%20and%20Client.md) (`add_two_ints_server` in `my_py_pkg`).
- **Interface Knowledge**: Understanding of ROS2 messages and services from [7.1](Section%207%20-%20ROS2%20Interfaces/7.1%20-%20What%20is%20a%20ROS2%20Interface.md).
- **CLI Tools**: Familiarity with `ros2 interface`, `ros2 node`, `ros2 topic`, and `ros2 service` from [5.6](Section%205%20-%20ROS2%20Communication/5.6%20-%20Introspecting%20ROS2%20Topics%20with%20Command%20Line%20Tools.md) and [6.8](Section%206%20-%20ROS2%20Services/6.8%20-%20Introspecting%20ROS2%20Services%20with%20Command%20Line%20Tools.md).
- **Development Tools**:
  - A `bash`-compatible terminal (e.g., Terminator: `sudo apt install terminator`).
  - Interfaces installed (included in `ros-jazzy-desktop` or install via `sudo apt install ros-jazzy-example-interfaces ros-jazzy-sensor-msgs`).

## Step-by-Step Instructions

### Step 1: Ensure Terminals Are Sourced

To introspect interfaces, all terminals must be sourced to include the ROS2 environment and your workspace, especially after building new interfaces or nodes.

1. **Close All Terminals**:
   ```bash
   pkill terminator
   ```
   This ensures no stale environments persist.

2. **Open New Terminals**:
   ```bash
   terminator
   ```
   If `~/.bashrc` includes:
   ```bash
   source /opt/ros/jazzy/setup.bash
   source ~/ros2_ws/install/setup.bash
   ```
   new terminals are automatically sourced. Verify:
   ```bash
   echo $ROS_DISTRO
   ```
   Expected output: `jazzy`.

3. **Why This Matters**:
   - Building interfaces (e.g., `my_robot_interfaces`) or nodes updates `install/`, requiring a fresh `source`.
   - Unsourced terminals may miss new interfaces, causing errors like “unknown interface” in `ros2 interface` commands.

**Screenshot**: Terminal confirming sourced environment:

![Sourced Terminal](images/sourced_terminal.png "Terminal showing ROS_DISTRO=jazzy")

### Step 2: Inspect Interface Definitions with `ros2 interface show`

Use `ros2 interface show` to view the definition of a specific interface.

1. **Show a Standard Interface**:
   ```bash
   ros2 interface show example_interfaces/msg/Int64
   ```
   Expected output:
   ```
   int64 data
   ```

2. **Show a Custom Message**:
   ```bash
   ros2 interface show my_robot_interfaces/msg/HardwareStatus
   ```
   Expected output:
   ```
   float64 temperature
   bool are_motors_ready
   string debug_message
   ```

3. **Show a Custom Service**:
   ```bash
   ros2 interface show my_robot_interfaces/srv/ComputeRectangleArea
   ```
   Expected output:
   ```
   float64 length
   float64 width
   ---
   float64 area
   ```

4. **Show a Complex Interface**:
   ```bash
   ros2 interface show sensor_msgs/msg/MagneticField
   ```
   Expected output (partial):
   ```
   std_msgs/Header header
   geometry_msgs/Vector3 magnetic_field
   float64[9] magnetic_field_covariance
   ```
   - Demonstrates nested messages (`std_msgs/Header`, `geometry_msgs/Vector3`).

5. **Notes**:
   - Syntax: `ros2 interface show <package_name>/<msg_or_srv>/<interface_name>`.
   - Works for both global (`/opt/ros/jazzy`) and workspace (`~/ros2_ws/install`) interfaces.
   - Autocompletion (press `Tab`) helps find package and interface names.

**Screenshot**: Terminal output of `ros2 interface show my_robot_interfaces/srv/ComputeRectangleArea`:

![Interface Show](images/ros2_interface_show_compute_rectangle_area.png "ros2 interface show my_robot_interfaces/srv/ComputeRectangleArea")

### Step 3: List All Interfaces with `ros2 interface list`

Use `ros2 interface list` to display all available interfaces in the sourced environment.

1. **List All Interfaces**:
   ```bash
   ros2 interface list
   ```
   Expected output (partial, long list):
   ```
   example_interfaces/msg/Bool
   example_interfaces/msg/Int64
   geometry_msgs/msg/Point
   my_robot_interfaces/msg/HardwareStatus
   my_robot_interfaces/srv/ComputeRectangleArea
   sensor_msgs/msg/MagneticField
   std_msgs/msg/Header
   ...
   ```
   - Includes all messages and services from installed packages and the workspace.
   - Output is extensive due to ROS2’s many standard packages.

2. **Filter with `grep`**:
   To focus on specific packages:
   ```bash
   ros2 interface list | grep my_robot_interfaces
   ```
   Expected output:
   ```
   my_robot_interfaces/msg/HardwareStatus
   my_robot_interfaces/srv/ComputeRectangleArea
   ```

3. **Notes**:
   - Useful for discovering available interfaces.
   - Requires a sourced environment to include workspace interfaces.

**Screenshot**: Terminal output of `ros2 interface list | grep my_robot_interfaces`:

![Interface List](images/ros2_interface_list_my_robot_interfaces.png "ros2 interface list filtered for my_robot_interfaces")

### Step 4: List Interfaces by Package with `ros2 interface package`

Use `ros2 interface package` to list all interfaces in a specific package.

1. **List Interfaces in `my_robot_interfaces`**:
   ```bash
   ros2 interface package my_robot_interfaces
   ```
   Expected output:
   ```
   my_robot_interfaces/msg/HardwareStatus
   my_robot_interfaces/srv/ComputeRectangleArea
   ```

2. **List Interfaces in `sensor_msgs`**:
   ```bash
   ros2 interface package sensor_msgs
   ```
   Expected output (partial):
   ```
   sensor_msgs/msg/BatteryState
   sensor_msgs/msg/CameraInfo
   sensor_msgs/msg/MagneticField
   ...
   ```

3. **Notes**:
   - Syntax: `ros2 interface package <package_name>`.
   - Autocompletion helps find package names.
   - More focused than `ros2 interface list`.

**Screenshot**: Terminal output of `ros2 interface package my_robot_interfaces`:

![Interface Package](images/ros2_interface_package_my_robot_interfaces.png "ros2 interface package my_robot_interfaces")

### Step 5: Introspect Interfaces via Nodes, Topics, and Services

Use `ros2 node`, `ros2 topic`, and `ros2 service` commands to find interfaces associated with running nodes, topics, or services.

1. **Start a Publisher Node**:
   Run the Python publisher from [7.3](Section%207%20-%20ROS2%20Interfaces/7.3%20-%20Using%20a%20Custom%20Message%20in%20a%20Python%20Node.md):
   ```bash
   terminator
   source ~/ros2_ws/install/setup.bash
   ros2 run my_py_pkg hardware_status_publisher
   ```

2. **Inspect Node Information**:
   In another sourced terminal:
   ```bash
   terminator
   source ~/ros2_ws/install/setup.bash
   ros2 node list
   ```
   Expected output:
   ```
   /hardware_status_publisher
   ```
   Then:
   ```bash
   ros2 node info /hardware_status_publisher
   ```
   Expected output (partial):
   ```
   Publishers:
     /hardware_status: my_robot_interfaces/msg/HardwareStatus
   ```
   - Shows the topic `/hardware_status` uses `my_robot_interfaces/msg/HardwareStatus`.

3. **Inspect Topic Information**:
   ```bash
   ros2 topic list
   ```
   Expected output includes:
   ```
   /hardware_status
   /parameter_events
   /rosout
   ```
   Then:
   ```bash
   ros2 topic info /hardware_status
   ```
   Expected output:
   ```
   Type: my_robot_interfaces/msg/HardwareStatus
   Publisher count: 1
   Subscriber count: 0
   ```

4. **Stop the Publisher**:
   Press `Ctrl+C` in the publisher terminal.

5. **Start a Service Server**:
   Run the `add_two_ints_server` from [6.3](Section%206%20-%20ROS2%20Services/6.3%20-%20Writing%20a%20Python%20Service%20Server%20and%20Client.md):
   ```bash
   ros2 run my_py_pkg add_two_ints_server
   ```

6. **Inspect Service Information**:
   ```bash
   ros2 node list
   ```
   Expected output:
   ```
   /add_two_ints_server
   ```
   Then:
   ```bash
   ros2 node info /add_two_ints_server
   ```
   Expected output (partial):
   ```
   Service Servers:
     /add_two_ints: example_interfaces/srv/AddTwoInts
   ```
   Alternatively:
   ```bash
   ros2 service list
   ```
   Expected output includes:
   ```
   /add_two_ints
   ```
   Then:
   ```bash
   ros2 service type /add_two_ints
   ```
   Expected output:
   ```
   example_interfaces/srv/AddTwoInts
   ```

7. **Notes**:
   - `ros2 node info` shows publishers, subscribers, and services with their interface types.
   - `ros2 topic info` and `ros2 service type` directly provide the interface type.
   - Requires running nodes to inspect their communication interfaces.
   - All terminals must be sourced to recognize custom interfaces.

**Screenshot**: Terminal output of `ros2 node info /hardware_status_publisher`:

![Node Info](images/ros2_node_info_hardware_status_publisher.png "ros2 node info /hardware_status_publisher")

### Step 6: Understand Communication Layers vs. Content

- **Communication Layer**:
  - **Topics**: Named channels (e.g., `/hardware_status`) for publishing/subscribing messages.
  - **Services**: Named endpoints (e.g., `/add_two_ints`) for request/response interactions.
  - Defined by names and types (e.g., publisher, service server).
- **Content**:
  - **Interfaces**: Messages (e.g., `my_robot_interfaces/msg/HardwareStatus`) or services (e.g., `my_robot_interfaces/srv/ComputeRectangleArea`) that define the data structure.
  - Transported over topics or services.
- **Example**:
  - Topic `/hardware_status` (communication layer) carries `my_robot_interfaces/msg/HardwareStatus` (content).
  - Service `/add_two_ints` (communication layer) uses `example_interfaces/srv/AddTwoInts` (content).

**Screenshot**: Diagram illustrating communication layer vs. content:

![Communication Layer Diagram](images/communication_layer_vs_content.png "Diagram of communication layer vs. content")

### Troubleshooting

- **Interface Not Found**:
  - Source workspace: `source ~/ros2_ws/install/setup.bash`.
  - Verify interface exists: `ros2 interface list | grep my_robot_interfaces`.
  - Rebuild: `colcon build --packages-select my_robot_interfaces`.
  - Check terminal sourcing: `echo $ROS_DISTRO` should show `jazzy`.
- **Autocompletion Fails**:
  - Ensure terminal is sourced.
  - Check package installation: `apt list --installed | grep ros-jazzy`.
  - Reopen terminal: `terminator`.
- **Node or Topic/Service Not Found**:
  - Ensure nodes are running: `ros2 node list`.
  - Verify topic/service exists: `ros2 topic list` or `ros2 service list`.
  - Source terminal and restart node: `ros2 run my_py_pkg hardware_status_publisher`.
- **Long Output Overwhelms Terminal**:
  - Use `grep` to filter: `ros2 interface list | grep <package_name>`.
  - Redirect to file: `ros2 interface list > interfaces.txt`.

### Notes

- **Fact-Checking**:
  - **Interface Commands**: `ros2 interface show`, `list`, `package` supported for messages and services, per [ROS2 CLI Tools](https://docs.ros.org/en/jazzy/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Interfaces.html).
  - **Node/Topic/Service Inspection**: `ros2 node info`, `ros2 topic info`, `ros2 service type` provide interface types, per [ROS2 CLI Tools](https://docs.ros.org/en/jazzy/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes.html), [ROS2 Topics](https://docs.ros.org/en/jazzy/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics.html), [ROS2 Services](https://docs.ros.org/en/jazzy/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services.html).
  - **Sourcing**: Critical for custom interfaces, per [ROS2 Workspace Tutorial](https://docs.ros.org/en/jazzy/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.html).
  - **Interface Naming**: Custom interfaces (`my_robot_interfaces`) treated like standard ones, per [ROS2 Interface Design](https://design.ros2.org/articles/interface_definition.html).
  - **Complex Interfaces**: `sensor_msgs` includes nested messages, per [ROS2 Sensor Msgs](https://docs.ros.org/en/jazzy/_static/api/sensor_msgs/index.html).
  - **Communication Layer**: Topics/services are distinct from their interfaces, per [ROS2 Concepts](https://docs.ros.org/en/jazzy/Concepts/About-ROS-2-Interfaces.html).

- **Transcript Clarifications**:
  - Emphasized sourcing all terminals, recommending `~/.bashrc` setup.
  - Clarified `ros2 interface` commands with precise syntax and examples.
  - Corrected “SV” to `srv` for `ComputeRectangleArea.srv`.
  - Added `sensor_msgs/msg/MagneticField` example to show complexity.
  - Explained communication layer vs. content with clear examples.
  - Included `add_two_ints_server` from Section 6 for service introspection.

- **Repository Structure**:
  - Places tutorial in `Section 7 - ROS2 Interfaces/`, alongside 7.1–7.5.
  - Uses `images/` for five screenshots: `sourced_terminal.png`, `ros2_interface_show_compute_rectangle_area.png`, `ros2_interface_list_my_robot_interfaces.png`, `ros2_interface_package_my_robot_interfaces.png`, `ros2_node_info_hardware_status_publisher.png`, `communication_layer_vs_content.png`.
  - Assumes prior sections (3–6) and 7.1–7.5 exist.

- **Images**:
  - Create screenshots for `images/`:
    - `sourced_terminal.png`: Terminal showing `echo $ROS_DISTRO` output.
    - `ros2_interface_show_compute_rectangle_area.png`: Terminal output of `ros2 interface show my_robot_interfaces/srv/ComputeRectangleArea`.
    - `ros2_interface_list_my_robot_interfaces.png`: Terminal output of `ros2 interface list | grep my_robot_interfaces`.
    - `ros2_interface_package_my_robot_interfaces.png`: Terminal output of `ros2 interface package my_robot_interfaces`.
    - `ros2_node_info_hardware_status_publisher.png`: Terminal output of `ros2 node info /hardware_status_publisher`.
    - `communication_layer_vs_content.png`: Diagram (create using a tool like draw.io) showing topics/services vs. interfaces.
  - Use GNOME Screenshot (`sudo apt install gnome-screenshot`) or Shutter (`sudo apt install shutter`) for terminal shots.

- **Best Practices**:
  - Source all terminals after building interfaces or nodes, ideally via `~/.bashrc`.
  - Use `ros2 interface show` to inspect specific interfaces before coding.
  - Filter `ros2 interface list` with `grep` for large environments.
  - Cross-check interfaces via `ros2 node info`, `ros2 topic info`, or `ros2 service type` when debugging.
  - Understand communication layers (topics/services) vs. content (interfaces) for clear system design.

## Next Steps

You’ve learned to introspect ROS2 interfaces using command line tools. Next, you’ll:
- Use `ComputeRectangleArea.srv` in a Python service server and client (e.g., `7.7 - Writing a Python Service with a Custom Service`).
- Use `ComputeRectangleArea.srv` in a C++ service server and client (e.g., `7.8 - Writing a C++ Service with a Custom Service`).
- Combine custom messages and services in `turtlesim` or a final course project (hinted in 6.10).
- Explore advanced introspection with `ros2 interface proto` for message/service prototypes (if supported in Jazzy).

For more details, refer to the [ROS2 Documentation](https://docs.ros.org/en/jazzy/index.html) or the [ROS2 for Beginners](https://www.udemy.com/course/ros2-for-beginners/) course.