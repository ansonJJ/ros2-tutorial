# 6.2 - Writing a Python Service Server

This tutorial demonstrates how to create a **ROS2 service server** in Python using the `example_interfaces/srv/AddTwoInts` service interface, which accepts two integers (`a` and `b`) as a request and returns their sum as a response. Building on [6.1 - What is a ROS2 Service](Section%206%20-%20ROS2%20Services/6.1%20-%20What%20is%20a%20ROS2%20Service.md) and topic concepts from [5.1 - What is a ROS2 Topic](Section%205%20-%20ROS2%20Communication/5.1%20-%20What%20is%20a%20ROS2%20Topic.md) through [5.9 - Experimenting with ROS2 Topics Using Turtlesim](Section%205%20-%20ROS2%20Communication/5.9%20-%20Experimenting%20with%20ROS2%20Topics%20Using%20Turtlesim.md), you’ll write a service server in the `my_py_pkg` package, configure it as an executable, and test it using the `ros2 service call` command. This tutorial is part of the [ROS2 for Beginners](https://www.udemy.com/course/ros2-for-beginners/) Udemy course and targets ROS2 Jazzy Jalisco on Ubuntu 24.04.

## Prerequisites

- **ROS2 Installation**: ROS2 Jazzy installed in `/opt/ros/jazzy` (via `ros-jazzy-desktop`), which includes `example_interfaces`. Source the environment:
  ```bash
  source /opt/ros/jazzy/setup.bash
  ```
  See the [ROS2 Installation Guide](https://docs.ros.org/en/jazzy/Installation.html) if not installed.
- **ROS2 Workspace**: A ROS2 workspace (`~/ros2_ws`) with the `my_py_pkg` Python package, set up in [3.1 - ROS2 Workspace Setup Tutorial](Section%203%20-%20Your%20First%20ROS2%20Program/3.1%20-%20ROS2%20Workspace%20Setup%20Tutorial.md) and [3.2 - Creating a ROS2 Python Package](Section%203%20-%20Your%20First%20ROS2%20Program/3.2%20-%20Creating%20a%20ROS2%20Python%20Package.md). Source the workspace:
  ```bash
  source ~/ros2_ws/install/setup.bash
  ```
- **Package Dependencies**: Ensure `my_py_pkg`’s `package.xml` includes `example_interfaces` as a dependency (added in [5.2 - Writing a Python Publisher](Section%205%20-%20ROS2%20Communication/5.2%20-%20Writing%20a%20Python%20Publisher.md)):
  ```xml
  <depend>example_interfaces</depend>
  ```
- **Service Knowledge**: Understanding of ROS2 services, clients, and servers from [6.1 - What is a ROS2 Service](Section%206%20-%20ROS2%20Services/6.1%20-%20What%20is%20a%20ROS2%20Service.md).
- **Topic Knowledge**: Familiarity with ROS2 nodes and topics from [5.1 - What is a ROS2 Topic](Section%205%20-%20ROS2%20Communication/5.1%20-%20What%20is%20a%20ROS2%20Topic.md) through [5.9 - Experimenting with ROS2 Topics Using Turtlesim](Section%205%20-%20ROS2%20Communication/5.9%20-%20Experimenting%20with%20ROS2%20Topics%20Using%20Turtlesim.md).
- **CLI Tools**: Familiarity with `ros2 node`, `ros2 service`, and `ros2 interface` from [4.1 - Introspecting Nodes with ROS2 CLI](Section%204%20-%20Introduction%20to%20ROS2%20Tools/4.1%20-%20Introspecting%20Nodes%20with%20ROS2%20CLI.md) and [5.6 - Introspecting ROS2 Topics with Command Line Tools](Section%205%20-%20ROS2%20Communication/5.6%20-%20Introspecting%20ROS2%20Topics%20with%20Command%20Line%20Tools.md).
- **Development Tools**:
  - A `bash`-compatible terminal (e.g., Terminator: `sudo apt install terminator`).
  - Visual Studio Code (`code`) for editing: `sudo snap install --classic code`.
  - `example_interfaces` installed (included in `ros-jazzy-desktop` or install via `sudo apt install ros-jazzy-example-interfaces`).

## Step-by-Step Instructions

### Step 1: Understand the Service Interface

The `AddTwoInts` service interface defines the request and response messages for the service. Inspect it to understand its structure.

1. **Show the Interface**:
   In a terminal, run:
   ```bash
   source ~/ros2_ws/install/setup.bash
   ros2 interface show example_interfaces/srv/AddTwoInts
   ```
   **Expected Output**:
   ```
   int64 a
   int64 b
   ---
   int64 sum
   ```
   - **Request**: Two fields, `a` (int64) and `b` (int64), sent from the client to the server.
   - **Response**: One field, `sum` (int64), returned from the server to the client.
   - **Separator**: The `---` separates the request and response messages, indicating that a service interface comprises two distinct messages.

**Screenshot**: `ros2 interface show example_interfaces/srv/AddTwoInts`:

![Interface Show AddTwoInts](images/interface_show_add_two_ints.png "ros2 interface show example_interfaces/srv/AddTwoInts")

### Step 2: Create the Service Server Node

Write a Python script for a service server node in the `my_py_pkg` package that uses `AddTwoInts` to sum two integers.

1. **Navigate to the Package**:
   Go to the `my_py_pkg` package in your workspace:
   ```bash
   cd ~/ros2_ws/src/my_py_pkg/my_py_pkg
   ```

2. **Create the Script**:
   Create a new file named `add_two_ints_server.py`:
   ```bash
   touch add_two_ints_server.py
   ```

3. **Make it Executable**:
   Set executable permissions:
   ```bash
   chmod +x add_two_ints_server.py
   ```

4. **Write the Code**:
   Open `add_two_ints_server.py` in Visual Studio Code:
   ```bash
   code add_two_ints_server.py
   ```
   Add the following code, which creates a node with a service server for `/add_two_ints`:

   ```python
   #!/usr/bin/env python3
   import rclpy
   from rclpy.node import Node
   from example_interfaces.srv import AddTwoInts

   class AddTwoIntsServerNode(Node):
       def __init__(self):
           super().__init__("add_two_ints_server")
           self.server = self.create_service(
               AddTwoInts, "add_two_ints", self.callback_add_two_ints
           )
           self.get_logger().info("Add Two Ints Server has been started")

       def callback_add_two_ints(self, request: AddTwoInts.Request, response: AddTwoInts.Response):
           response.sum = request.a + request.b
           self.get_logger().info(f"{request.a} + {request.b} = {response.sum}")
           return response

   def main(args=None):
       rclpy.init(args=args)
       node = AddTwoIntsServerNode()
       rclpy.spin(node)
       rclpy.shutdown()

   if __name__ == "__main__":
       main()
   ```

   **Code Explanation**:
   - **Shebang**: `#!/usr/bin/env python3` ensures Python 3 execution.
   - **Imports**:
     - `rclpy`: ROS2 Python client library.
     - `Node`: Base class for ROS2 nodes.
     - `AddTwoInts`: Service interface from `example_interfaces/srv`.
   - **Node Class**:
     - Inherits from `Node`, named `add_two_ints_server`.
     - In `__init__`:
       - Initializes the node with `super().__init__("add_two_ints_server")`.
       - Creates a service server with `self.create_service(AddTwoInts, "add_two_ints", self.callback_add_two_ints)`:
         - `AddTwoInts`: Service type.
         - `"add_two_ints"`: Service name (uses a verb, as recommended).
         - `self.callback_add_two_ints`: Callback to handle requests.
       - Logs a startup message.
     - `callback_add_two_ints`:
       - Takes `request` (type `AddTwoInts.Request`) and `response` (type `AddTwoInts.Response`).
       - Computes `response.sum = request.a + request.b`.
       - Logs the equation (e.g., “3 + 7 = 10”).
       - Returns `response` (critical to avoid exceptions).
   - **Main Function**:
     - Initializes ROS2 communication with `rclpy.init()`.
     - Creates the node instance.
     - Spins the node to keep it alive and process requests with `rclpy.spin()`.
     - Shuts down cleanly with `rclpy.shutdown()`.

**Screenshot**: `add_two_ints_server.py` in VS Code:

![AddTwoIntsServer Code](images/add_two_ints_server_code.png "add_two_ints_server.py in VS Code")

### Step 3: Update setup.py

Configure `add_two_ints_server.py` as an executable in `my_py_pkg`’s `setup.py`.

1. **Edit setup.py**:
   Open `~/ros2_ws/src/my_py_pkg/setup.py` in VS Code:
   ```bash
   cd ~/ros2_ws/src/my_py_pkg
   code setup.py
   ```
   Add `add_two_ints_server.py` to the `entry_points` section under `console_scripts`. The updated `setup.py` should include:

   ```python
   from setuptools import find_packages, setup

   package_name = 'my_py_pkg'

   setup(
       name=package_name,
       version='0.0.0',
       packages=find_packages(exclude=['test']),
       data_files=[
           ('share/ament_index/resource_index/packages', ['resource/' + package_name]),
           ('share/' + package_name, ['package.xml']),
       ],
       install_requires=['setuptools'],
       zip_safe=True,
       maintainer='Your Name',
       maintainer_email='your.email@example.com',
       description='ROS2 Python package for learning',
       license='Apache-2.0',
       tests_require=['pytest'],
       entry_points={
           'console_scripts': [
               'robot_news_station = my_py_pkg.robot_news_station:main',
               'smartphone = my_py_pkg.smartphone:main',
               'add_two_ints_server = my_py_pkg.add_two_ints_server:main',
           ],
       },
   )
   ```

   **Changes**:
   - Added `add_two_ints_server = my_py_pkg.add_two_ints_server:main` to `console_scripts`, mapping the `add_two_ints_server` command to the `main` function in `add_two_ints_server.py`.

**Screenshot**: Updated `setup.py`:

![SetupPy Updated](images/setup_py_add_two_ints.png "setup.py with add_two_ints_server entry")

### Step 4: Build the Package

Build the `my_py_pkg` package to include the new executable.

1. **Navigate to Workspace**:
   ```bash
   cd ~/ros2_ws
   ```

2. **Build the Package**:
   Build `my_py_pkg` with `colcon`:
   ```bash
   colcon build --packages-select my_py_pkg --symlink-install
   ```
   - `--packages-select my_py_pkg`: Builds only `my_py_pkg`.
   - `--symlink-install`: Creates symlinks for Python scripts, allowing edits without rebuilding.

3. **Source the Workspace**:
   ```bash
   source install/setup.bash
   ```

**Screenshot**: `colcon build` output:

![Colcon Build](images/colcon_build_add_two_ints.png "colcon build for my_py_pkg")

### Step 5: Run and Test the Service Server

Run the service server and test it using `ros2 service call`.

1. **Run the Server**:
   In a terminal, start the server node:
   ```bash
   source ~/ros2_ws/install/setup.bash
   ros2 run my_py_pkg add_two_ints_server
   ```
   **Expected Output**:
   ```
   [INFO] [add_two_ints_server]: Add Two Ints Server has been started
   ```
   The server is now running and waiting for requests.

2. **Inspect the Node**:
   In a new terminal, verify the node and service:
   ```bash
   source ~/ros2_ws/install/setup.bash
   ros2 node list
   ```
   **Expected Output**:
   ```
   /add_two_ints_server
   ```
   ```bash
   ros2 node info /add_two_ints_server
   ```
   **Expected Output (partial)**:
   ```
   /add_two_ints_server
     Service Servers:
       /add_two_ints: example_interfaces/srv/AddTwoInts
   ```
   This confirms the `/add_two_ints` service server is active.

3. **Test with ros2 service call**:
   In a new terminal, call the service with a request (`a: 3, b: 7`):
   ```bash
   source ~/ros2_ws/install/setup.bash
   ros2 service call /add_two_ints example_interfaces/srv/AddTwoInts "{a: 3, b: 7}"
   ```
   **Expected Output**:
   ```
   requester: making request: example_interfaces.srv.AddTwoInts_Request(a=3, b=7)
   response:
   example_interfaces.srv.AddTwoInts_Response(sum=10)
   ```
   In the server terminal, you should see:
   ```
   [INFO] [add_two_ints_server]: 3 + 7 = 10
   ```

**Screenshot**: Service call and server output:

![Service Call Test](images/service_call_add_two_ints.png "ros2 service call /add_two_ints and server log")

### Step 6: Understand the Workflow

- **Node Initialization**:
  - The `AddTwoIntsServerNode` initializes with `rclpy.init()` and creates a node named `add_two_ints_server`.
- **Service Creation**:
  - `self.create_service(AddTwoInts, "add_two_ints", self.callback_add_two_ints)` registers the `/add_two_ints` service with the `AddTwoInts` interface and a callback.
- **Request Handling**:
  - When a client calls `/add_two_ints`, the `callback_add_two_ints` function:
    - Receives `request` (`AddTwoInts.Request`) with `a` and `b`.
    - Computes `response.sum = request.a + request.b`.
    - Logs the equation.
    - Returns `response` (`AddTwoInts.Response`) with `sum`.
- **Spinning**:
  - `rclpy.spin(node)` keeps the node alive, processing incoming requests.
- **Testing**:
  - `ros2 service call` sends a request and displays the response, validating the server’s functionality.

### Troubleshooting

- **Node Not Found**:
  - Ensure the workspace is sourced: `source ~/ros2_ws/install/setup.bash`.
  - Verify `my_py_pkg` is built: `colcon build --packages-select my_py_pkg`.
  - Check the executable: `ros2 run my_py_pkg add_two_ints_server`.
- **Service Not Found**:
  - Verify the service with `ros2 service list` (should include `/add_two_ints`).
  - Ensure the server node is running: `ros2 node list`.
- **Import Error**:
  - Confirm `example_interfaces` is in `package.xml`:
    ```xml
    <depend>example_interfaces</depend>
    ```
  - Rebuild and source the workspace.
- **Callback Exception**:
  - Ensure the callback returns `response`: `return response`.
  - Check request fields (`request.a`, `request.b`) and response field (`response.sum`) match the interface.
- **ros2 service call Syntax Error**:
  - Use the correct format: `ros2 service call /add_two_ints example_interfaces/srv/AddTwoInts "{a: <int>, b: <int>}"`.
  - Ensure integers (e.g., `3`, not `3.0`) and proper curly braces.

### Notes

- **Fact-Checking**:
  - **Service Interface**: `example_interfaces/srv/AddTwoInts` has `a`, `b` (int64) in the request and `sum` (int64) in the response, separated by `---`, per [example_interfaces/AddTwoInts](http://docs.ros.org/en/jazzy/api/example_interfaces/srv/AddTwoInts.html).
  - **Service Server**: `rclpy.create_service` takes a service type, name, and callback, per [ROS2 rclpy Services](https://docs.ros.org/en/jazzy/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Service-And-Client-Python.html#writing-the-service-node).
  - **Callback**: Must return the response object, or an exception occurs, per [ROS2 Python Service Tutorial](https://docs.ros.org/en/jazzy/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Service-And-Client-Python.html#writing-the-service-node).
  - **Service Name**: Using verbs (e.g., `add_two_ints`) is a convention for actions/computations, per [ROS2 Naming Conventions](https://design.ros2.org/articles/topic_and_service_names.html).
  - **ros2 service call**: Syntax matches the interface’s request fields, per [ROS2 CLI: Service Call](https://docs.ros.org/en/jazzy/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services.html#calling-a-service).
  - **Node Info**: `ros2 node info` shows service servers, per [ROS2 CLI: Node Info](https://docs.ros.org/en/jazzy/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes.html#introspecting-nodes).

- **Transcript Clarifications**:
  - Corrected “Ros” to “ROS2” and “Ros to” to “ROS2”.
  - Clarified `example_interfaces/srv/AddTwoInts` import (uses `.srv`, not `.msg`).
  - Emphasized returning `response` in the callback to avoid exceptions.
  - Specified `add_two_ints` as a verb-based service name, aligning with best practices.
  - Noted that `ros2 service call` is limited for complex requests, to be covered in a future CLI tutorial.

- **Repository Structure**:
  - Places the tutorial in `Section 6 - ROS2 Services/`, following [6.1 - What is a ROS2 Service](Section%206%20-%20ROS2%20Services/6.1%20-%20What%20is%20a%20ROS2%20Service.md).
  - Uses `images/` for four screenshots: `interface_show_add_two_ints.png`, `add_two_ints_server_code.png`, `setup_py_add_two_ints.png`, `colcon_build_add_two_ints.png`, `service_call_add_two_ints.png`.

- **Images**:
  - Create screenshots for `images/`:
    - `interface_show_add_two_ints.png`: Output of `ros2 interface show example_interfaces/srv/AddTwoInts`.
    - `add_two_ints_server_code.png`: `add_two_ints_server.py` in VS Code.
    - `setup_py_add_two_ints.png`: `setup.py` with `add_two_ints_server` entry.
    - `colcon_build_add_two_ints.png`: `colcon build` output.
    - `service_call_add_two_ints.png`: `ros2 service call` and server log output.
  - Use tools like GNOME Screenshot or Shutter.

- **Best Practices**:
  - Use verb-based service names (e.g., `add_two_ints`) for actions or computations.
  - Always return the `response` object in the service callback.
  - Log request and response data for debugging.
  - Use `--symlink-install` with `colcon build` for Python script development.
  - Test services with `ros2 service call` for simple interfaces before writing clients.

## Next Steps

You’ve created a Python service server for `/add_two_ints` that sums two integers, tested it with `ros2 service call`, and verified its functionality. Next, you’ll:
- Write a Python service client to call `/add_two_ints` programmatically (e.g., `6.3 - Writing a Python Service Client`).
- Explore ROS2 service introspection with CLI tools (e.g., `ros2 service list`, `ros2 service info`).
- Create custom service interfaces, as hinted in the transcript.
- Apply services to `turtlesim` (e.g., `/turtle1/teleport_absolute`) from [4.5 - Discover Turtlesim](Section%204%20-%20Introduction%20to%20ROS2%20Tools/4.5%20-%20Discover%20Turtlesim.md).

For more details, refer to the [ROS2 Documentation](https://docs.ros.org/en/jazzy/index.html) or the [ROS2 for Beginners](https://www.udemy.com/course/ros2-for-beginners/) course.