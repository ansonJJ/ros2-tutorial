# 6.4 - Writing a Python Service Client (OOP)

This tutorial demonstrates how to create an object-oriented (OOP) Python service client in ROS2 to call the `example_interfaces/srv/AddTwoInts` service, which sums two integers. Building on the non-OOP client from [6.3 - Writing a Python Service Client (Non-OOP)](Section%206%20-%20ROS2%20Services/6.3%20-%20Writing%20a%20Python%20Service%20Client%20(Non-OOP).md), the service server from [6.2 - Writing a Python Service Server](Section%206%20-%20ROS2%20Services/6.2%20-%20Writing%20a%20Python%20Service%20Server.md), service concepts from [6.1 - What is a ROS2 Service](Section%206%20-%20ROS2%20Services/6.1%20-%20What%20is%20a%20ROS2%20Service.md), and topics from [5.1 - What is a ROS2 Topic](Section%205%20-%20ROS2%20Communication/5.1%20-%20What%20is%20a%20ROS2%20Topic.md) through [5.9 - Experimenting with ROS2 Topics Using Turtlesim](Section%205%20-%20ROS2%20Communication/5.9%20-%20Experimenting%20with%20ROS2%20Topics%20Using%20Turtlesim.md), you’ll integrate a service client into an OOP node using asynchronous calls with a callback to handle responses. This approach avoids spinning issues and supports multiple requests. The tutorial is part of the [ROS2 for Beginners](https://www.udemy.com/course/ros2-for-beginners/) Udemy course and targets ROS2 Jazzy Jalisco on Ubuntu 24.04.

## Prerequisites

- **ROS2 Installation**: ROS2 Jazzy installed in `/opt/ros/jazzy` (via `ros-jazzy-desktop`), including `example_interfaces`. Source the environment:
  ```bash
  source /opt/ros/jazzy/setup.bash
  ```
  See the [ROS2 Installation Guide](https://docs.ros.org/en/jazzy/Installation.html) if not installed.
- **ROS2 Workspace**: A ROS2 workspace (`~/ros2_ws`) with the `my_py_pkg` Python package, set up in [3.1 - ROS2 Workspace Setup Tutorial](Section%203%20-%20Your%20First%20ROS2%20Program/3.1%20-%20ROS2%20Workspace%20Setup%20Tutorial.md) and [3.2 - Creating a ROS2 Python Package](Section%203%20-%20Your%20First%20ROS2%20Program/3.2%20-%20Creating%20a%20ROS2%20Python%20Package.md). Source the workspace:
  ```bash
  source ~/ros2_ws/install/setup.bash
  ```
- **Package Dependencies**: Ensure `my_py_pkg`’s `package.xml` includes `example_interfaces` (added in [5.2 - Writing a Python Publisher](Section%205%20-%20ROS2%20Communication/5.2%20-%20Writing%20a%20Python%20Publisher.md)):
  ```xml
  <depend>example_interfaces</depend>
  ```
- **Service Server**: The `add_two_ints_server` node from [6.2 - Writing a Python Service Server](Section%206%20-%20ROS2%20Services/6.2%20-%20Writing%20a%20Python%20Service%20Server.md), providing the `/add_two_ints` service.
- **Service Knowledge**: Understanding of ROS2 services, asynchronous calls, and callbacks from [6.1 - What is a ROS2 Service](Section%206%20-%20ROS2%20Services/6.1%20-%20What%20is%20a%20ROS2%20Service.md) and [6.3 - Writing a Python Service Client (Non-OOP)](Section%206%20-%20ROS2%20Services/6.3%20-%20Writing%20a%20Python%20Service%20Client%20(Non-OOP).md).
- **Topic Knowledge**: Familiarity with ROS2 nodes and topics from [5.1 - What is a ROS2 Topic](Section%205%20-%20ROS2%20Communication/5.1%20-%20What%20is%20a%20ROS2%20Topic.md) through [5.9 - Experimenting with ROS2 Topics Using Turtlesim](Section%205%20-%20ROS2%20Communication/5.9%20-%20Experimenting%20with%20ROS2%20Topics%20Using%20Turtlesim.md).
- **CLI Tools**: Familiarity with `ros2 node` and `ros2 service` from [4.1 - Introspecting Nodes with ROS2 CLI](Section%204%20-%20Introduction%20to%20ROS2%20Tools/4.1%20-%20Introspecting%20Nodes%20with%20ROS2%20CLI.md) and [5.6 - Introspecting ROS2 Topics with Command Line Tools](Section%205%20-%20ROS2%20Communication/5.6%20-%20Introspecting%20ROS2%20Topics%20with%20Command%20Line%20Tools.md).
- **Development Tools**:
  - A `bash`-compatible terminal (e.g., Terminator: `sudo apt install terminator`).
  - Visual Studio Code (`code`): `sudo snap install --classic code`.
  - `example_interfaces` installed (included in `ros-jazzy-desktop` or install via `sudo apt install ros-jazzy-example-interfaces`).

## Step-by-Step Instructions

### Step 1: Review the Service Interface

The `AddTwoInts` service interface defines the request and response messages. Confirm its structure for the client.

1. **Show the Interface**:
   Run:
   ```bash
   source ~/ros2_ws/install/setup.bash
   ros2 interface show example_interfaces/srv/AddTwoInts
   ```
   **Expected Output**:
   ```
   int64 a
   int64 b
   ---
   int64 sum
   ```
   - **Request**: `a` (int64), `b` (int64).
   - **Response**: `sum` (int64).
   - **Separator**: `---` splits request and response.

**Screenshot**: `ros2 interface show example_interfaces/srv/AddTwoInts`:

![Interface Show AddTwoInts](images/interface_show_add_two_ints.png "ros2 interface show example_interfaces/srv/AddTwoInts")

### Step 2: Create the OOP Service Client Node

Write an OOP Python script in `my_py_pkg` to call `/add_two_ints` using a node class with asynchronous callbacks.

1. **Navigate to the Package**:
   Go to `my_py_pkg`:
   ```bash
   cd ~/ros2_ws/src/my_py_pkg/my_py_pkg
   ```

2. **Create the Script**:
   Create `add_two_ints_client.py`:
   ```bash
   touch add_two_ints_client.py
   ```

3. **Make it Executable**:
   Set permissions:
   ```bash
   chmod +x add_two_ints_client.py
   ```

4. **Write the Code**:
   Open `add_two_ints_client.py` in VS Code:
   ```bash
   code add_two_ints_client.py
   ```
   Add the following code, which creates an OOP node, initializes a client, and sends multiple requests:

   ```python
   #!/usr/bin/env python3
   import rclpy
   from rclpy.node import Node
   from example_interfaces.srv import AddTwoInts
   from functools import partial

   class AddTwoIntsClientNode(Node):
       def __init__(self):
           super().__init__("add_two_ints_client")
           self.client = self.create_client(AddTwoInts, "add_two_ints")
           self.call_add_two_ints(2, 7)
           self.call_add_two_ints(1, 4)
           self.call_add_two_ints(10, 20)

       def call_add_two_ints(self, a, b):
           while not self.client.wait_for_service(timeout_sec=1.0):
               self.get_logger().warn("Waiting for add_two_ints server")
           request = AddTwoInts.Request()
           request.a = a
           request.b = b
           future = self.client.call_async(request)
           future.add_done_callback(partial(self.callback_call_add_two_ints, request=request))

       def callback_call_add_two_ints(self, future, request):
           response = future.result()
           self.get_logger().info(f"{request.a} + {request.b} = {response.sum}")

   def main(args=None):
       rclpy.init(args=args)
       node = AddTwoIntsClientNode()
       rclpy.spin(node)
       rclpy.shutdown()

   if __name__ == "__main__":
       main()
   ```

   **Code Explanation**:
   - **Shebang**: `#!/usr/bin/env python3` ensures Python 3 execution.
   - **Imports**:
     - `rclpy`, `Node`: ROS2 Python client library and node class.
     - `AddTwoInts`: Service interface.
     - `partial`: From `functools`, to pass additional arguments (request) to the callback.
   - **Node Class**:
     - Inherits from `Node`, named `add_two_ints_client`.
     - In `__init__`:
       - Initializes the node.
       - Creates a client with `self.create_client(AddTwoInts, "add_two_ints")`.
       - Calls `call_add_two_ints` three times with pairs (2, 7), (1, 4), (10, 20).
     - `call_add_two_ints(a, b)`:
       - Waits for the service with `self.client.wait_for_service(timeout_sec=1.0)`.
       - Creates a request with `AddTwoInts.Request()`, setting `request.a` and `request.b`.
       - Sends the request asynchronously with `self.client.call_async(request)`, returning a `Future`.
       - Registers a callback with `future.add_done_callback`, using `partial` to pass `request`.
     - `callback_call_add_two_ints(future, request)`:
       - Retrieves the response with `future.result()`.
       - Logs the equation (e.g., “2 + 7 = 9”).
   - **Main Function**:
     - Initializes ROS2, creates the node, spins it with `rclpy.spin(node)` to process callbacks, and shuts down.

**Screenshot**: `add_two_ints_client.py` in VS Code:

![AddTwoIntsClientOOP Code](images/add_two_ints_client_oop_code.png "add_two_ints_client.py in VS Code")

### Step 3: Update setup.py

Configure `add_two_ints_client.py` as an executable in `my_py_pkg`’s `setup.py`.

1. **Edit setup.py**:
   Open `~/ros2_ws/src/my_py_pkg/setup.py` in VS Code:
   ```bash
   cd ~/ros2_ws/src/my_py_pkg
   code setup.py
   ```
   Add `add_two_ints_client` to `entry_points` under `console_scripts`. The updated `setup.py` should include:

   ```python
   from setuptools import find_packages, setup

   package_name = 'my_py_pkg'

   setup(
       name=package_name,
       version='0.0.0',
       packages=find_packages(exclude=['test']),
       data_files=[
           ('share/ament_index/resource_index/packages', ['resource/' + package_name]),
           ('share/' + package_name, ['package.xml']),
       ],
       install_requires=['setuptools'],
       zip_safe=True,
       maintainer='Your Name',
       maintainer_email='your.email@example.com',
       description='ROS2 Python package for learning',
       license='Apache-2.0',
       tests_require=['pytest'],
       entry_points={
           'console_scripts': [
               'robot_news_station = my_py_pkg.robot_news_station:main',
               'smartphone = my_py_pkg.smartphone:main',
               'add_two_ints_server = my_py_pkg.add_two_ints_server:main',
               'add_two_ints_client_no_oop = my_py_pkg.add_two_ints_client_no_oop:main',
               'add_two_ints_client = my_py_pkg.add_two_ints_client:main',
           ],
       },
   )
   ```

   **Changes**:
   - Added `add_two_ints_client = my_py_pkg.add_two_ints_client:main`.

**Screenshot**: Updated `setup.py`:

![SetupPy Updated](images/setup_py_add_two_ints_client_oop.png "setup.py with add_two_ints_client entry")

### Step 4: Build the Package

Build `my_py_pkg` to include the new executable.

1. **Navigate to Workspace**:
   ```bash
   cd ~/ros2_ws
   ```

2. **Build the Package**:
   Build with `colcon`:
   ```bash
   colcon build --packages-select my_py_pkg --symlink-install
   ```

3. **Source the Workspace**:
   ```bash
   source install/setup.bash
   ```

**Screenshot**: `colcon build` output:

![Colcon Build](images/colcon_build_add_two_ints_client_oop.png "colcon build for my_py_pkg")

### Step 5: Run and Test the Service Client

Run the server and OOP client to test multiple requests.

1. **Run the Server**:
   Start the server from [6.2 - Writing a Python Service Server](Section%206%20-%20ROS2%20Services/6.2%20-%20Writing%20a%20Python%20Service%20Server.md):
   ```bash
   source ~/ros2_ws/install/setup.bash
   ros2 run my_py_pkg add_two_ints_server
   ```
   **Expected Output**:
   ```
   [INFO] [add_two_ints_server]: Add Two Ints Server has been started
   ```

2. **Run the Client**:
   Run the OOP client:
   ```bash
   source ~/ros2_ws/install/setup.bash
   ros2 run my_py_pkg add_two_ints_client
   ```
   **Expected Output**:
   ```
   [INFO] [add_two_ints_client]: 2 + 7 = 9
   [INFO] [add_two_ints_client]: 1 + 4 = 5
   [INFO] [add_two_ints_client]: 10 + 20 = 30
   ```
   Server terminal:
   ```
   [INFO] [add_two_ints_server]: 2 + 7 = 9
   [INFO] [add_two_ints_server]: 1 + 4 = 5
   [INFO] [add_two_ints_server]: 10 + 20 = 30
   ```

3. **Test Without Server**:
   Stop the server (`Ctrl+C`). Run the client:
   ```bash
   ros2 run my_py_pkg add_two_ints_client
   ```
   **Expected Output**:
   ```
   [WARN] [add_two_ints_client]: Waiting for add_two_ints server
   [WARN] [add_two_ints_client]: Waiting for add_two_ints server
   ...
   ```
   Restart the server, and the client should log the results.

**Screenshot**: Client and server output for multiple requests:

![Client Server Test OOP](images/client_server_test_add_two_ints_oop.png "OOP client and server logs")

### Step 6: Understand the Workflow

- **Node Initialization**:
  - Creates `AddTwoIntsClientNode`, initializing the client with `create_client`.
  - Calls `call_add_two_ints` for three request pairs.
- **Service Client**:
  - `call_add_two_ints` waits for the server, creates a request, and sends it asynchronously.
  - Uses `future.add_done_callback` with `partial` to pass `request` to the callback.
- **Callback Handling**:
  - `callback_call_add_two_ints` retrieves `response.sum` and logs the equation using `request.a`, `request.b`.
  - Relies on `rclpy.spin` in `main` to process callbacks.
- **Avoiding Spin Issues**:
  - Uses `add_done_callback` instead of `spin_until_future_complete` to prevent spinning while the node is already spinning via `rclpy.spin`.
- **Multiple Requests**:
  - Sends three requests sequentially, processed one by one, with responses logged as callbacks execute.

### Troubleshooting

- **Callback Error (Unexpected Keyword Argument)**:
  - Ensure `from functools import partial` and `partial(self.callback_call_add_two_ints, request=request)`.
- **Client Hangs**:
  - Verify the server is running: `ros2 run my_py_pkg add_two_ints_server`.
  - Check service availability: `ros2 service list`.
  - Source the workspace: `source ~/ros2_ws/install/setup.bash`.
- **Import Error**:
  - Confirm `example_interfaces` in `package.xml`:
    ```xml
    <depend>example_interfaces</depend>
    ```
  - Rebuild and source.
- **No Logs**:
  - Ensure `call_add_two_ints` is called in `__init__` or another callback.
  - Verify `rclpy.spin(node)` in `main`.
- **Response Error**:
  - Check `response.sum` matches the interface.
  - Ensure server returns valid responses (see [6.2 - Writing a Python Service Server](Section%206%20-%20ROS2%20Services/6.2%20-%20Writing%20a%20Python%20Service%20Server.md)).

### Notes

- **Fact-Checking**:
  - **AddTwoInts Interface**: `a`, `b` (int64) in request, `sum` (int64) in response, per [example_interfaces/AddTwoInts](http://docs.ros.org/en/jazzy/api/example_interfaces/srv/AddTwoInts.html).
  - **Client Creation**: `rclpy.create_client` uses service type and name, per [ROS2 rclpy Services](https://docs.ros.org/en/jazzy/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Service-And-Client-Python.html#writing-the-client-node).
  - **Asynchronous Call**: `call_async` with `add_done_callback` handles responses in spinning nodes, per [ROS2 Python Client Tutorial](https://docs.ros.org/en/jazzy/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Service-And-Client-Python.html#call-the-service-asynchronously).
  - **functools.partial**: Required for extra callback arguments, per [Python functools](https://docs.python.org/3/library/functools.html#functools.partial).
  - **Spin Avoidance**: `add_done_callback` prevents nested spinning, per [ROS2 rclpy Futures](https://docs.ros.org/en/jazzy/api/rclpy/api/futures.html).
  - **Multiple Requests**: Clients can send multiple requests, processed sequentially, per [ROS2 Services](https://docs.ros.org/en/jazzy/Concepts/About-Services.html).

- **Transcript Clarifications**:
  - Corrected “Ros” to “ROS2”.
  - Specified request pairs (2, 7), (1, 4), (10, 20) with sums 9, 5 Incidentally, 30.
  - Emphasized `partial` for passing `request` to callback, fixing “unexpected keyword argument” error.
  - Clarified `add_done_callback` to avoid `spin_until_future_complete` in a spinning node.
  - Noted that requests are processed sequentially, appearing fast due to low computation.

- **Repository Structure**:
  - Places tutorial in `Section 6 - ROS2 Services/`, following 6.1–6.3.
  - Uses `images/` for four screenshots: `interface_show_add_two_ints.png`, `add_two_ints_client_oop_code.png`, `setup_py_add_two_ints_client_oop.png`, `colcon_build_add_two_ints_client_oop.png`, `client_server_test_add_two_ints_oop.png`.

- **Images**:
  - Create screenshots for `images/`:
    - `interface_show_add_two_ints.png`: Reuse from 6.2/6.3 if unchanged.
    - `add_two_ints_client_oop_code.png`: `add_two_ints_client.py` in VS Code.
    - `setup_py_add_two_ints_client_oop.png`: `setup.py` with `add_two_ints_client`.
    - `colcon_build_add_two_ints_client_oop.png`: `colcon build` output.
    - `client_server_test_add_two_ints_oop.png`: Client/server logs for three requests.
  - Use GNOME Screenshot or Shutter.

- **Best Practices**:
  - Use `call_async` with `add_done_callback` in OOP nodes to leverage `rclpy.spin`.
  - Use `functools.partial` for extra callback arguments.
  - Implement `wait_for_service` to ensure server availability.
  - Log request and response for debugging.
  - Use `--symlink-install` for Python development.

## Next Steps

You’ve created an OOP Python service client for `/add_two_ints`, integrated it into a node, and tested multiple requests. Next, you’ll:
- Explore ROS2 service introspection with CLI tools (e.g., `ros2 service list`, `ros2 service info`).
- Create custom service interfaces, as hinted in the transcript.
- Apply services to `turtlesim` (e.g., `/turtle1/teleport_absolute`) from [4.5 - Discover Turtlesim](Section%204%20-%20Introduction%20to%20ROS2%20Tools/4.5%20-%20Discover%20Turtlesim.md).
- Test the client with a C++ service server to verify language agnosticism.
- Combine services with topics in a node (e.g., trigger service calls from topic callbacks).

For more details, refer to the [ROS2 Documentation](https://docs.ros.org/en/jazzy/index.html) or the [ROS2 for Beginners](https://www.udemy.com/course/ros2-for-beginners/) course.