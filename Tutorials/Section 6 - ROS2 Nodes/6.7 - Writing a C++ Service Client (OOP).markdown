# 6.7 - Writing a C++ Service Client (OOP)

This tutorial demonstrates how to create an **object-oriented (OOP) C++ service client** in ROS2, integrated into a node, to call the `example_interfaces/srv/AddTwoInts` service, which accepts two integers (`a` and `b`) and returns their sum. This client complements the C++ service server from [6.5 - Writing a C++ Service Server](Section%206%20-%20ROS2%20Services/6.5%20-%20Writing%20a%20C%2B%2B%20Service%20Server.md), the non-OOP C++ client from [6.6 - Writing a C++ Service Client (Non-OOP)](Section%206%20-%20ROS2%20Services/6.6%20-%20Writing%20a%20C%2B%2B%20Service%20Client%20(Non-OOP).md), and mirrors the OOP Python client from [6.4 - Writing a Python Service Client (OOP)](Section%206%20-%20ROS2%20Services/6.4%20-%20Writing%20a%20Python%20Service%20Client%20(OOP).md). It builds on service concepts from [6.1 - What is a ROS2 Service](Section%206%20-%20ROS2%20Services/6.1%20-%20What%20is%20a%20ROS2%20Service.md), the non-OOP Python client from [6.3 - Writing a Python Service Client (Non-OOP)](Section%206%20-%20ROS2%20Services/6.3%20-%20Writing%20a%20Python%20Service%20Client%20(Non-OOP).md), and topics from [5.1 - What is a ROS2 Topic](Section%205%20-%20ROS2%20Communication/5.1%20-%20What%20is%20a%20ROS2%20Topic.md) through [5.9 - Experimenting with ROS2 Topics Using Turtlesim](Section%205%20-%20ROS2%20Communication/5.9%20-%20Experimenting%20with%20ROS2%20Topics%20Using%20Turtlesim.md). You’ll write an OOP C++ client in the `my_cpp_pkg` package, use asynchronous service calls with a callback, and test it with the server from 6.2 or 6.5. This client is designed for integration into nodes with publishers, subscribers, or other services, showcasing modularity. This tutorial is part of the [ROS2 for Beginners](https://www.udemy.com/course/ros2-for-beginners/) Udemy course and targets ROS2 Jazzy Jalisco on Ubuntu 24.04.

## Prerequisites

- **ROS2 Installation**: ROS2 Jazzy installed in `/opt/ros/jazzy` (via `ros-jazzy-desktop`), including `example_interfaces`. Source the environment:
  ```bash
  source /opt/ros/jazzy/setup.bash
  ```
  See the [ROS2 Installation Guide](https://docs.ros.org/en/jazzy/Installation.html) if not installed.
- **ROS2 Workspace**: A ROS2 workspace (`~/ros2_ws`) with the `my_cpp_pkg` C++ package and `my_py_pkg` Python package, set up in [3.1 - ROS2 Workspace Setup Tutorial](Section%203%20-%20Your%20First%20ROS2%20Program/3.1%20-%20ROS2%20Workspace%20Setup%20Tutorial.md), [3.2 - Creating a ROS2 Python Package](Section%203%20-%20Your%20First%20ROS2%20Program/3.2%20-%20Creating%20a%20ROS2%20Python%20Package.md), and [3.3 - Creating a ROS2 C++ Package](Section%203%20-%20Your%20First%20ROS2%20Program/3.3%20-%20Creating%20a%20ROS2%20C%2B%2B%20Package.md). Source the workspace:
  ```bash
  source ~/ros2_ws/install/setup.bash
  ```
- **Package Dependencies**: Ensure `my_cpp_pkg`’s `package.xml` includes `rclcpp` and `example_interfaces` (added in [5.4 - Writing a C++ Publisher](Section%205%20-%20ROS2%20Communication/5.4%20-%20Writing%20a%20C%2B%2B%20Publisher.md)):
  ```xml
  <depend>rclcpp</depend>
  <depend>example_interfaces</depend>
  ```
- **Service Server**: The `add_two_ints_server` node from [6.2 - Writing a Python Service Server](Section%206%20-%20ROS2%20Services/6.2%20-%20Writing%20a%20Python%20Service%20Server.md) or [6.5 - Writing a C++ Service Server](Section%206%20-%20ROS2%20Services/6.5%20-%20Writing%20a%20C%2B%2B%20Service%20Server.md), providing the `/add_two_ints` service.
- **Service Knowledge**: Understanding of ROS2 services, asynchronous calls, futures, and callbacks from [6.1 - What is a ROS2 Service](Section%206%20-%20ROS2%20Services/6.1%20-%20What%20is%20a%20ROS2%20Service.md), [6.3 - Writing a Python Service Client (Non-OOP)](Section%206%20-%20ROS2%20Services/6.3%20-%20Writing%20a%20Python%20Service%20Client%20(Non-OOP).md), and [6.6 - Writing a C++ Service Client (Non-OOP)](Section%206%20-%20ROS2%20Services/6.6%20-%20Writing%20a%20C%2B%2B%20Service%20Client%20(Non-OOP).md).
- **Topic Knowledge**: Familiarity with ROS2 nodes, topics, and OOP node structures from [5.1 - What is a ROS2 Topic](Section%205%20-%20ROS2%20Communication/5.1%20-%20What%20is%20a%20ROS2%20Topic.md) through [5.9 - Experimenting with ROS2 Topics Using Turtlesim](Section%205%20-%20ROS2%20Communication/5.9%20-%20Experimenting%20with%20ROS2%20Topics%20Using%20Turtlesim.md).
- **CLI Tools**: Familiarity with `ros2 node` and `ros2 service` from [4.1 - Introspecting Nodes with ROS2 CLI](Section%204%20-%20Introduction%20to%20ROS2%20Tools/4.1%20-%20Introspecting%20Nodes%20with%20ROS2%20CLI.md) and [5.6 - Introspecting ROS2 Topics with Command Line Tools](Section%205%20-%20ROS2%20Communication/5.6%20-%20Introspecting%20ROS2%20Topics%20with%20Command%20Line%20Tools.md).
- **Development Tools**:
  - A `bash`-compatible terminal (e.g., Terminator: `sudo apt install terminator`).
  - Visual Studio Code (`code`): `sudo snap install --classic code`.
  - `example_interfaces` installed (included in `ros-jazzy-desktop` or install via `sudo apt install ros-jazzy-example-interfaces`).

## Step-by-Step Instructions

### Step 1: Review the Service Interface

The `AddTwoInts` service interface defines the request and response messages. Confirm its structure for the client.

1. **Show the Interface**:
   Run:
   ```bash
   source ~/ros2_ws/install/setup.bash
   ros2 interface show example_interfaces/srv/AddTwoInts
   ```
   **Expected Output**:
   ```
   int64 a
   int64 b
   ---
   int64 sum
   ```
   - **Request**: `a` (int64), `b` (int64).
   - **Response**: `sum` (int64).
   - **Separator**: `---` splits request and response.

**Screenshot**: `ros2 interface show example_interfaces/srv/AddTwoInts`:

![Interface Show AddTwoInts](images/interface_show_add_two_ints.png "ros2 interface show example_interfaces/srv/AddTwoInts")

### Step 2: Create the OOP Service Client

Write an OOP C++ source file in `my_cpp_pkg` to call `/add_two_ints` using asynchronous requests with a callback, integrated into a node.

1. **Navigate to the Package**:
   Go to the `my_cpp_pkg` source directory:
   ```bash
   cd ~/ros2_ws/src/my_cpp_pkg/src
   ```

2. **Create the Source File**:
   Create `add_two_ints_client.cpp`:
   ```bash
   touch add_two_ints_client.cpp
   ```

3. **Write the Code**:
   Open `add_two_ints_client.cpp` in VS Code:
   ```bash
   code add_two_ints_client.cpp
   ```
   Add the following code, which creates a node with a client that sends multiple requests:

   ```cpp
   #include <rclcpp/rclcpp.hpp>
   #include <example_interfaces/srv/add_two_ints.hpp>
   #include <chrono>
   #include <memory>

   using namespace std::chrono_literals;
   using namespace std::placeholders;

   class AddTwoIntsClientNode : public rclcpp::Node
   {
   public:
       AddTwoIntsClientNode() : Node("add_two_ints_client")
       {
           client_ = this->create_client<example_interfaces::srv::AddTwoInts>("add_two_ints");
           // Send multiple test requests
           callAddTwoInts(10, 5);
           callAddTwoInts(12, 7);
           callAddTwoInts(1, 2);
       }

       void callAddTwoInts(int a, int b)
       {
           while (!client_->wait_for_service(1s)) {
               RCLCPP_WARN(this->get_logger(), "Waiting for add_two_ints server");
           }

           auto request = std::make_shared<example_interfaces::srv::AddTwoInts::Request>();
           request->a = a;
           request->b = b;

           client_->async_send_request(
               request,
               std::bind(&AddTwoIntsClientNode::callbackAddTwoIntsResponse, this, _1));
       }

   private:
       void callbackAddTwoIntsResponse(
           rclcpp::Client<example_interfaces::srv::AddTwoInts>::SharedFuture future)
       {
           auto response = future.get();
           RCLCPP_INFO(this->get_logger(), "Sum = %d", (int)response->sum);
       }

       rclcpp::Client<example_interfaces::srv::AddTwoInts>::SharedPtr client_;
   };

   int main(int argc, char *argv[])
   {
       rclcpp::init(argc, argv);
       auto node = std::make_shared<AddTwoIntsClientNode>();
       rclcpp::spin(node);
       rclcpp::shutdown();
       return 0;
   }
   ```

   **Code Explanation**:
   - **Includes**:
     - `<rclcpp/rclcpp.hpp>`: ROS2 C++ client library.
     - `<example_interfaces/srv/add_two_ints.hpp>`: `AddTwoInts` service interface.
     - `<chrono>`: For `std::chrono::seconds` in `wait_for_service`.
     - `<memory>`: For `std::shared_ptr` and `std::make_shared`.
   - **Namespaces**:
     - `using namespace std::chrono_literals`: Enables `1s` for `1 second`.
     - `using namespace std::placeholders`: Simplifies `std::placeholders::_1` to `_1` for `std::bind`.
   - **Node Class**:
     - Inherits from `rclcpp::Node`, named `add_two_ints_client`.
     - Private member `client_`: A `shared_ptr` to a client of type `example_interfaces::srv::AddTwoInts`.
     - Constructor:
       - Initializes the node.
       - Creates the client with `create_client<AddTwoInts>("add_two_ints")`.
       - Sends three test requests: `(10, 5)`, `(12, 7)`, `(1, 2)`.
     - `callAddTwoInts(int a, int b)`:
       - Waits for the service with `client_->wait_for_service(1s)`, logging warnings if unavailable.
       - Creates a `std::shared_ptr<AddTwoInts::Request>`, setting `request->a` and `request->b`.
       - Sends the request asynchronously with `async_send_request`, binding `callbackAddTwoIntsResponse` using `std::bind` with `_1` for the future.
     - `callbackAddTwoIntsResponse`:
       - Takes a `SharedFuture` (future for the response).
       - Retrieves the response with `future.get()`, a `std::shared_ptr<AddTwoInts::Response>`.
       - Logs the sum (e.g., “Sum = 15”).
   - **Main Function**:
     - Initializes ROS2 with `rclcpp::init`.
     - Creates a shared pointer to the node.
     - Spins the node with `rclcpp::spin` to process callbacks.
     - Shuts down with `rclcpp::shutdown`.

**Screenshot**: `add_two_ints_client.cpp` in VS Code:

![AddTwoIntsClientOOP Code](images/add_two_ints_client_oop_cpp_code.png "add_two_ints_client.cpp in VS Code")

### Step 3: Update CMakeLists.txt

Configure `add_two_ints_client.cpp` as an executable in `my_cpp_pkg`’s `CMakeLists.txt`.

1. **Edit CMakeLists.txt**:
   Open `~/ros2_ws/src/my_cpp_pkg/CMakeLists.txt` in VS Code:
   ```bash
   cd ~/ros2_ws/src/my_cpp_pkg
   code CMakeLists.txt
   ```
   Add the executable and its dependencies. The updated `CMakeLists.txt` should include:

   ```cmake
   cmake_minimum_required(VERSION 3.8)
   project(my_cpp_pkg)

   if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
     add_compile_options(-Wall -Wextra -Wpedantic)
   endif()

   # Find dependencies
   find_package(ament_cmake REQUIRED)
   find_package(rclcpp REQUIRED)
   find_package(example_interfaces REQUIRED)

   # Include directories
   include_directories(include)

   # Add executables
   add_executable(robot_news_station src/robot_news_station.cpp)
   ament_target_dependencies(robot_news_station rclcpp example_interfaces)

   add_executable(smartphone src/smartphone.cpp)
   ament_target_dependencies(smartphone rclcpp example_interfaces)

   add_executable(add_two_ints_server src/add_two_ints_server.cpp)
   ament_target_dependencies(add_two_ints_server rclcpp example_interfaces)

   add_executable(add_two_ints_client_no_oop src/add_two_ints_client_no_oop.cpp)
   ament_target_dependencies(add_two_ints_client_no_oop rclcpp example_interfaces)

   add_executable(add_two_ints_client src/add_two_ints_client.cpp)
   ament_target_dependencies(add_two_ints_client rclcpp example_interfaces)

   # Install executables
   install(TARGETS
     robot_news_station
     smartphone
     add_two_ints_server
     add_two_ints_client_no_oop
     add_two_ints_client
     DESTINATION lib/${PROJECT_NAME}
   )

   if(BUILD_TESTING)
     find_package(ament_lint_auto REQUIRED)
     ament_lint_auto_find_test_dependencies()
   endif()

   ament_package()
   ```

   **Changes**:
   - Added `add_executable(add_two_ints_client src/add_two_ints_client.cpp)`.
   - Added `ament_target_dependencies(add_two_ints_client rclcpp example_interfaces)`.
   - Included `add_two_ints_client` in the `install(TARGETS ...)` section.

**Screenshot**: Updated `CMakeLists.txt`:

![CMakeLists Updated](images/cmakelists_add_two_ints_client_oop.png "CMakeLists.txt with add_two_ints_client")

### Step 4: Build the Package

Build the `my_cpp_pkg` package to compile the new executable.

1. **Navigate to Workspace**:
   ```bash
   cd ~/ros2_ws
   ```

2. **Build the Package**:
   Build `my_cpp_pkg` specifically to preserve `my_py_pkg`’s `--symlink-install`:
   ```bash
   colcon build --packages-select my_cpp_pkg
   ```

3. **Source the Workspace**:
   ```bash
   source install/setup.bash
   ```

**Screenshot**: `colcon build` output:

![Colcon Build](images/colcon_build_add_two_ints_client_oop_cpp.png "colcon build for my_cpp_pkg")

### Step 5: Run and Test the Service Client

Run the server (C++ or Python) and the OOP C++ client to test multiple requests.

1. **Run the Server**:
   Start the C++ server from [6.5 - Writing a C++ Service Server](Section%206%20-%20ROS2%20Services/6.5%20-%20Writing%20a%20C%2B%2B%20Service%20Server.md):
   ```bash
   source ~/ros2_ws/install/setup.bash
   ros2 run my_cpp_pkg add_two_ints_server
   ```
   **Expected Output**:
   ```
   [INFO] [add_two_ints_server]: Add Two Ints Server has been started
   ```
   Alternatively, use the Python server from [6.2 - Writing a Python Service Server](Section%206%20-%20ROS2%20Services/6.2%20-%20Writing%20a%20Python%20Service%20Server.md):
   ```bash
   ros2 run my_py_pkg add_two_ints_server
   ```
   **Expected Output**:
   ```
   [INFO] [add_two_ints_server]: Add Two Ints Server has been started
   ```

2. **Run the Client**:
   Run the OOP C++ client:
   ```bash
   source ~/ros2_ws/install/setup.bash
ಸ

System: * Today's date and time is 12:35 PM IST on Friday, May 16, 2025.